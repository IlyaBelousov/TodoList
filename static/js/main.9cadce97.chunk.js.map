{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","AddItem","trimmedTitle","trim","callBack","offMode","TextField","onBlur","variant","size","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","ChangeTitle","onDoubleClick","Todolist","className","ChangeTodolistTitle","id","removeTodoList","Delete","newTitle","addTask","style","listStyle","padding","tasks","map","m","isDone","Checkbox","ChangeStatusTask","checked","ChangeTaskTitle","removeTasks","Button","filter","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","allTasks","setAllTasks","todolistId","f","newTask","todolist","find","tl","ChangeTaskStatus","t","todoListID","mapedTodoLists","tasksForTodolist","Grid","item","Paper","elevation","margin","boxSizing","AppBar","marginBottom","position","Toolbar","justifyContent","aria-label","edge","Menu","Typography","Container","fixed","container","newTodolist","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9cadce97.chunk.js","sourcesContent":["import {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\n\r\ntype inputType = {\r\n    callBack: (newTitle: string) => void\r\n}\r\nexport const AddItemForm = (props: inputType) => {\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const AddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.callBack(trimmedTitle);\r\n\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n\r\n\r\n    };\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            setError(false);\r\n            AddItem();\r\n        }\r\n    };\r\n    const offMode = () => {\r\n        setError(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n                onBlur={offMode}\r\n                variant={'outlined'}\r\n                size={'small'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is reqired'}\r\n            />\r\n            {/*<input\r\n                className={error ? 'error' : 'inputClass'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />*/}\r\n            <IconButton\r\n                onBlur={offMode}\r\n                color={'primary'}\r\n                onClick={AddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n\r\n            {/*{error && <div className={'errorMessage'}>{error}</div>}*/}\r\n        </div>\r\n    );\r\n};","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChangeTitle:(title:string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.ChangeTitle(title)\r\n            setEditMode(false);\r\n        }\r\n    };\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        props.ChangeTitle(title)\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n        editMode\r\n            ?<TextField\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n            /*? <input autoFocus\r\n                     onBlur={offEditMode}\r\n                     value={title}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}/>*/\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {keyType} from '../../App';\r\nimport {AddItemForm} from '../AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    changeFilter: (key: keyType, todolistId: string) => void\r\n    ChangeStatusTask: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: keyType\r\n    removeTodoList: (todolistId: string) => void\r\n    ChangeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    ChangeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const ChangeTodolistTitle = (title: string) => {\r\n        props.ChangeTodolistTitle(title, props.id);\r\n    };\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('ALL', props.id);\r\n    };\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('Active', props.id);\r\n    };\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter('Completed', props.id);\r\n    };\r\n    const RemoveTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n\r\n    return <div className=\"todoListContainer\">\r\n        <h3><EditableSpan ChangeTitle={ChangeTodolistTitle} title={props.title}/>\r\n            <IconButton onClick={RemoveTodoList}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={(newTitle: string) => props.addTask(newTitle, props.id)}/>\r\n        <ul style={{listStyle:'none',padding:'0px'}}>\r\n            {\r\n                props.tasks.map((m) => {\r\n                    const removeTaskHandler = () => {\r\n                        props.removeTasks(m.id, props.id);\r\n                    };\r\n                    const CheckingHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                        props.ChangeStatusTask(m.id, event.currentTarget.checked, props.id);\r\n                    };\r\n                    const ChangeTitleHandler = (title: string) => {\r\n                        props.ChangeTaskTitle(m.id, title, props.id);\r\n                    };\r\n\r\n                    return (\r\n                        <li  key={m.id}>\r\n                            <span className={m.isDone ? 'isActive' : ''}>\r\n                                <Checkbox\r\n                                    size={'small'}\r\n                                    color={'primary'}\r\n                                    onChange={CheckingHandler}\r\n                                    checked={m.isDone}/>\r\n                                <EditableSpan ChangeTitle={ChangeTitleHandler} title={m.title}/>\r\n                            </span>\r\n                            <IconButton\r\n\r\n                                    color={'secondary'}\r\n                                    onClick={removeTaskHandler}>\r\n                                    <Delete />\r\n                            </IconButton>\r\n\r\n                        </li>);\r\n                })\r\n            }\r\n\r\n        </ul>\r\n        <div>\r\n\r\n            <Button\r\n                variant={props.filter === 'ALL' ? 'contained' : 'outlined'}\r\n                size={'small'}\r\n                color={'primary'}\r\n                onClick={onAllClickHandler}\r\n            >ALL</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Active' ? 'contained' : 'outlined'}\r\n                onClick={onActiveClickHandler}>Active</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Completed' ? 'contained' : 'outlined'}\r\n                onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n            {/*<button value={'Active'} changeFilter={props.changeFilter} filter={props.filter} id={props.id}/>\r\n            <button value={'Completed'} changeFilter={props.changeFilter} filter={props.filter} id={props.id}/>*/}\r\n            {/*<button value={'Completed'} className={props.filter==='Completed'?'activeFilter':''} onClick={()=> props.changeFilter('Completed',props.id)}>{props.value}</button>*/}\r\n\r\n\r\n            {/*<button className={props.filter==='ALL'?'activeFilter':''} onClick={()=> props.changeFilter('ALL')}>All</button>\r\n            <button className={props.filter==='Active'?'activeFilter':''} onClick={()=> props.changeFilter('Active')}>Active</button>\r\n            <button className={props.filter==='Completed'?'activeFilter':''} onClick={()=> props.changeFilter('Completed')}>Completed</button>*/}\r\n        </div>\r\n    </div>;\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport {Todolist} from './components/todolist/Todolist';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\n\r\nexport type keyType = 'ALL' | 'Active' | 'Completed'\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: keyType\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todoListID_1 = v1();\r\n    let todoListID_2 = v1();\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {\r\n            id: todoListID_1,\r\n            title: 'What to learn?',\r\n            filter: 'ALL'\r\n        },\r\n\r\n        {\r\n            id: todoListID_2,\r\n            title: 'What to buy?',\r\n            filter: 'ALL'\r\n        }\r\n    ]);\r\n\r\n\r\n    let [allTasks, setAllTasks] = useState({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'CSS', isDone: true},\r\n            {id: v1(), title: 'Redux', isDone: false}\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Water', isDone: true},\r\n            {id: v1(), title: 'Bread', isDone: true},\r\n            {id: v1(), title: 'Beer', isDone: false},\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Book', isDone: false}\r\n        ]\r\n    });\r\n    const removeTodoList = (todolistId: string) => {\r\n        todoLists = todoLists.filter(f => f.id !== todolistId);\r\n        setTodoLists([...todoLists]);\r\n        delete allTasks[todolistId];\r\n    };\r\n\r\n\r\n    const addTask = (newTitle: string, todolistId: string) => {\r\n        const newTask = {id: v1(), title: newTitle, isDone: false};\r\n        allTasks[todolistId] = [newTask, ...allTasks[todolistId]];\r\n        setAllTasks({...allTasks});\r\n    };\r\n\r\n\r\n    const removeTasks = (id: string, todolistId: string) => {\r\n        allTasks[todolistId] = allTasks[todolistId].filter(f => f.id !== id);\r\n        setAllTasks({...allTasks});\r\n\r\n\r\n    };\r\n    const changeFilter = (key: keyType, todolistId: string) => {\r\n        let todolist = todoLists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = key;\r\n            setTodoLists([...todoLists]);\r\n        }\r\n\r\n    };\r\n    const ChangeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\r\n        allTasks[todolistId] = allTasks[todolistId].map(t => {\r\n            if (t.id === id) {\r\n                return {...t, isDone};\r\n            }\r\n            return t;\r\n        });\r\n        setAllTasks({...allTasks});\r\n\r\n    };\r\n    const ChangeTaskTitle = (id: string, title: string, todolistId: string) => {\r\n        allTasks[todolistId] = allTasks[todolistId].map(t => {\r\n            if (t.id === id) {\r\n                return {...t, title};\r\n            }\r\n            return t;\r\n        });\r\n        setAllTasks({...allTasks});\r\n\r\n    };\r\n    const AddTodoList = (newTitle: string) => {\r\n        const newTodolist: TodoListType = {\r\n            id: v1(),\r\n            title: newTitle,\r\n            filter: 'ALL'\r\n        };\r\n        setTodoLists([...todoLists, newTodolist]);\r\n        setAllTasks({...allTasks, [newTodolist.id]: []});\r\n    };\r\n    const ChangeTodolistTitle = (title: string, todoListID: string) => {\r\n        setTodoLists(todoLists.map(tl => {\r\n            if (tl.id === todoListID) {\r\n                return {...tl, title: title};\r\n            }\r\n            return tl;\r\n        }));\r\n    };\r\n    let mapedTodoLists = todoLists.map(tl => {\r\n            let tasksForTodolist = allTasks[tl.id];\r\n            if (tl.filter === 'Active') {\r\n                tasksForTodolist = tasksForTodolist.filter(f => !f.isDone);\r\n\r\n            }\r\n            if (tl.filter === 'Completed') {\r\n                tasksForTodolist = tasksForTodolist.filter(f => f.isDone);\r\n            }\r\n            return <Grid  item key={tl.id}>\r\n                    <Paper\r\n                        elevation={5}\r\n                        style={{margin:'15px',padding:'15px',boxSizing:'border-box'}}><Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    tasks={tasksForTodolist}\r\n                    addTask={addTask}\r\n                    removeTasks={removeTasks}\r\n                    changeFilter={changeFilter}\r\n                    ChangeStatusTask={ChangeTaskStatus}\r\n                    filter={tl.filter}\r\n                    removeTodoList={removeTodoList}\r\n                    ChangeTaskTitle={ChangeTaskTitle}\r\n                    ChangeTodolistTitle={ChangeTodolistTitle}\r\n                /></Paper>\r\n            </Grid>;\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{marginBottom: '10px'}} position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton\r\n                        aria-label={'menu'}\r\n                        color={'inherit'}\r\n                        edge={'start'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container>\r\n                    <AddItemForm callBack={AddTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {mapedTodoLists}\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}