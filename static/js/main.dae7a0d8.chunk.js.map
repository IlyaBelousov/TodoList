{"version":3,"sources":["serviceWorker.ts","state/app-reducer.ts","components/ErrorSnackBar.tsx","api/task-api.ts","api/auth-api.ts","state/auth-reducer.ts","components/Login.tsx","api/todolist-api.ts","state/todolist-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","state/task-reducer.ts","components/todolist/Task.tsx","components/todolist/Todolist.tsx","components/TodoListList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","status","error","setAppStatusAC","type","setAppErrorAC","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackBar","useSelector","state","app","dispatch","useDispatch","handleClose","event","reason","Stack","spacing","sx","width","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","loginData","post","delete","AuthReducerInitialState","isLoggedIn","setLoggedInAC","Login","auth","useEffect","then","response","data","resultCode","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","messages","to","Grid","container","justifyContent","item","xs","style","display","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","name","onChange","handleChange","value","FormControlLabel","control","Checkbox","checked","color","todolistAPI","title","todoListId","put","InitialState","setEntityStatusAC","entityStatus","AddItemForm","memo","console","log","useState","setTitle","setError","AddItem","trimmedTitle","trim","callBack","offMode","disabled","size","onBlur","currentTarget","onKeyPress","key","helperText","IconButton","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","ChangeTitle","onDoubleClick","taskAPI","taskId","model","Task","ListItem","divider","alignItems","task","id","className","completed","e","ChangeTaskStatus","Completed","New","ChangeTaskTitle","removeTasks","Delete","Todolist","tasks","todolistId","fetchTasksAC","items","ChangeTodolistTitle","useCallback","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","RemoveTodoList","removeTodoList","getState","find","t","addedDate","deadline","description","order","priority","startDate","taskID","todolistID","changeTaskTitleAC","updateTaskTitleThunk","changeTaskStatusAC","updateTaskStatusThunk","tasksForTodolist","filter","f","newTitle","addTask","List","dense","map","m","Box","Button","TodoListList","todoLists","filterValue","ChangeFilterAC","todoListID","changeTodoListTitleThunk","taskTitle","createTaskThunk","AddTodoList","todoTitle","payload","createTodolistAction","Container","maxWidth","tl","Paper","paddingTop","padding","boxSizing","AppWithRedux","logOutHandler","AppBar","marginBottom","position","Toolbar","aria-label","edge","Menu","Typography","LinearProgress","fixed","exact","path","render","rootReducer","combineReducers","action","todolist","copyState","stateCopy","newTask","Hi","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dae7a0d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\nexport type AppStateType = typeof initialState\r\nexport const appReducer = (state: AppStateType = initialState, action: AppActionsTypes): AppStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"APP/SET-ERROR\":{\r\n            return {\r\n                ...state,\r\n                error:action.error\r\n            }\r\n        }\r\n        default :\r\n            return state\r\n    }\r\n}\r\nexport const setAppStatusAC = (status: RequestStatusType) => {\r\n    return {\r\n        type: 'APP/SET-STATUS',\r\n        status,\r\n    } as const\r\n}\r\nexport const setAppErrorAC = (error: string|null) => {\r\n    return {\r\n        type: 'APP/SET-ERROR',\r\n        error,\r\n    } as const\r\n}\r\n\r\nexport type AppActionsTypes = ReturnType<typeof setAppStatusAC>|ReturnType<typeof setAppErrorAC>","import React from 'react'\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {setAppErrorAC} from \"../state/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props,\r\n    ref,\r\n) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackBar() {\r\n    const error = useSelector<AppRootStateType, string|null>(state=>state.app.error)\r\n    const dispatch = useDispatch()\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    };\r\n\r\n    return (\r\n        <Stack spacing={2} sx={{ width: '100%' }}>\r\n            <Snackbar open={!!error} autoHideDuration={4000} onClose={handleClose}>\r\n                <Alert\r\n                    onClose={handleClose}\r\n                    severity=\"error\"\r\n                    sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Stack>\r\n    );\r\n}","import axios from 'axios';\r\nimport { RequestType } from './todolist-api';\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type updateTaskModelType={\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd60dcf74-681a-4412-9b6b-cffe62026499'\r\n    }\r\n});\r\nexport const taskAPI = {\r\n    getTasks: (todoListId: string) => {\r\n        return instance.get<{ items: TaskType[] }>(`${todoListId}/tasks`);\r\n    },\r\n    createTask: (todoListId: string, title: string) => {\r\n        return instance.post<RequestType<{ item: TaskType }>>(`${todoListId}/tasks`, { title })\r\n    },\r\n    deleteTask: (todoListId: string,taskId: string) => {\r\n        return instance.delete<RequestType<{}>>(`${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskTitle: (todoListId: string, taskId: string, model:updateTaskModelType) => {\r\n        return instance.put<RequestType<{ item: TaskType }>>(`${todoListId}/tasks/${taskId}`,model)\r\n    },\r\n    updateTaskStatus:(todoListId: string, taskId: string, model:updateTaskModelType)=>{\r\n        return instance.put<RequestType<{ item: TaskType }>>(`${todoListId}/tasks/${taskId}`,model)\r\n    }\r\n};","import axios from \"axios\";\r\nimport {RequestType} from \"./todolist-api\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd60dcf74-681a-4412-9b6b-cffe62026499'\r\n    }\r\n})\r\ntype AuthDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me: () => {\r\n        return instance.get<RequestType<AuthDataType>>('auth/me')\r\n    },\r\n    logIn: (loginData: LoginDataType) => {\r\n        return instance.post<RequestType<{ userId: number }>>('/auth/login', loginData)\r\n    },\r\n    logOut: () => {\r\n        return instance.delete<RequestType<{}>>('/auth/login')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {authAPI, LoginDataType} from \"../api/auth-api\";\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\nconst AuthReducerInitialState = {\r\n    isLoggedIn: false\r\n}\r\nexport type AuthReducerInitialStateType = typeof AuthReducerInitialState\r\nexport const authReducer = (state: AuthReducerInitialStateType = AuthReducerInitialState, action: AuthActionsType): AuthReducerInitialStateType => {\r\n    switch (action.type) {\r\n        case \"login/SET-IS-LOGGED-IN\": {\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.isLoggedIn\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setLoggedInAC = (isLoggedIn: boolean) => {\r\n    return {\r\n        type: 'login/SET-IS-LOGGED-IN',\r\n        isLoggedIn\r\n    }\r\n}\r\nexport const logInAC =(isLoggedIn: boolean)=>{\r\n    return {\r\n        type:'login/LOG-IN',\r\n        isLoggedIn\r\n    }\r\n}\r\nexport type AuthActionsType = ReturnType<typeof setLoggedInAC>|ReturnType<typeof setAppStatusAC>|ReturnType<typeof setAppErrorAC>\r\n\r\n\r\n//thunk\r\nexport const SetIsLoggedInTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setLoggedInAC(true))\r\n            }\r\n        })\r\n}\r\nexport const LoginTC = (loginData:LoginDataType) => (dispatch:Dispatch<AuthActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logIn(loginData)\r\n        .then(response=>{\r\n            if(response.data.resultCode===0){\r\n                 dispatch(setLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n            else {\r\n                dispatch(setAppErrorAC(response.data.messages[0]))\r\n            }\r\n        })\r\n}\r\nexport const LogOutTC = () => (dispatch:Dispatch<AuthActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logOut()\r\n        .then(response=>{\r\n            if(response.data.resultCode===0){\r\n                dispatch(setLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            }\r\n            else {\r\n                dispatch(setAppErrorAC(response.data.messages[0]))\r\n            }\r\n        })\r\n}","import React, {useEffect} from 'react';\r\nimport {Button, Checkbox, FormControl, FormGroup, FormLabel, Grid, TextField} from \"@mui/material\";\r\nimport FormControlLabel from '@mui/material/FormControlLabel'\r\nimport {useFormik} from \"formik\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {LoginTC, SetIsLoggedInTC} from \"../state/auth-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n   useEffect(() => {\r\n        dispatch(SetIsLoggedInTC())\r\n\r\n     }, [])\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            email:'',\r\n            password:'',\r\n            rememberMe:false,\r\n        },\r\n        onSubmit:values => {\r\n            dispatch(LoginTC(values))\r\n        }\r\n    })\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/Todolist'} />\r\n    }\r\n    return <Grid container justifyContent={'center'}>\r\n\r\n        <Grid  item xs={4} justifyContent={'center'}>\r\n            <h1 style={{display:'flex',justifyContent:'center'}}>Login</h1>\r\n            <form style={{display:'flex',justifyContent:'center'}} onSubmit={formik.handleSubmit}>\r\n\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label={'Email'}\r\n                            margin={'normal'}\r\n                            name={'email'}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.email}\r\n                        />\r\n                        <TextField\r\n                            type={'password'}\r\n                            label={'Password'}\r\n                            margin={'normal'}\r\n                            name={'password'}\r\n                            onChange={formik.handleChange}\r\n                            value={formik.values.password}\r\n                        />\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    onChange={formik.handleChange}\r\n                                    checked={formik.values.rememberMe}\r\n                                    name={'rememberMe'}\r\n                                />\r\n                            }\r\n\r\n                        />\r\n                        <Button type=\"submit\"\r\n                            variant={'outlined'}\r\n                            color={\"primary\"}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n\r\n    </Grid>\r\n};\r\n\r\n","import axios from 'axios';\r\n\r\n\r\nexport type TodoListType={\r\n    id:string\r\n    addedDate: string\r\n    order:number\r\n    title:string\r\n}\r\n\r\nexport type RequestType<T> = {\r\n    data: T\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'd60dcf74-681a-4412-9b6b-cffe62026499'\r\n    }\r\n});\r\nexport const todolistAPI = {\r\n    getTodoLists: () => {\r\n        return instance.get('');\r\n    },\r\n    createTodoList: (title: string) => {\r\n        return instance.post<RequestType<{item:TodoListType}>>('', {title});\r\n    },\r\n    deleteTodoList:(todoListId:string)=>{\r\n        return instance.delete<RequestType<{}>>(`${todoListId}`)\r\n    },\r\n    changeTodoListTitle:(todoListId:string,title:string)=>{\r\n        return instance.put<RequestType<{}>>(`${todoListId}`,{title})\r\n    }\r\n};","import {filterValuesType, TodoListDomainType} from '../AppWithRedux';\r\nimport {Dispatch} from 'redux';\r\nimport {todolistAPI} from '../api/todolist-api';\r\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\nimport {ActionsTypes} from \"./store\";\r\n\r\n\r\nexport type TodolistActionsType =\r\n    ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof ChangeFilterAC>\r\n    | ReturnType<typeof ChangeTodolistTitleAC>\r\n    | ReturnType<typeof fetchTodoListsAction>\r\n    | ReturnType<typeof createTodolistAction>\r\n    | ReturnType<typeof setEntityStatusAC>\r\n\r\n\r\nconst InitialState: Array<TodoListDomainType> = [];\r\n\r\nexport const TodolistReducer = (state: Array<TodoListDomainType> = InitialState, action: TodolistActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case \"SET-ENTITY-STATUS\":{\r\n            return state.map(tl=>tl.id===action.todoListId?{...tl,entityStatus:action.entityStatus}:tl)\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(f => f.id !== action.id);\r\n        }\r\n        case 'CHANGE-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filterValue;\r\n                return [...state];\r\n            } else return state;\r\n        }\r\n        case 'CREATE-TODOLIST': {\r\n            return [{...action.payload, filter: 'ALL', entityStatus: 'idle'}, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, title: action.title}\r\n                : tl);\r\n        }\r\n        case 'FETCH-TODOLISTS': {\r\n            return action.todoLists.map(tl => {\r\n                return {\r\n                    ...tl,\r\n                    filter: 'ALL',\r\n                    entityStatus: 'idle'\r\n                }\r\n            });\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const RemoveTodolistAC = (todolistID: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistID} as const;\r\n};\r\nexport const setEntityStatusAC = (todoListId: string,entityStatus: RequestStatusType) => {\r\n    return {type: 'SET-ENTITY-STATUS',todoListId, entityStatus} as const\r\n}\r\n\r\nexport const ChangeFilterAC = (todolistID: string, filterValue: filterValuesType) => {\r\n    return {type: 'CHANGE-FILTER', id: todolistID, filterValue: filterValue} as const;\r\n};\r\nexport const ChangeTodolistTitleAC = (todolistID: string, newTitle: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistID, title: newTitle} as const;\r\n};\r\nexport const fetchTodoListsAction = (todoLists: Array<TodoListDomainType>) => {\r\n    return {\r\n        type: 'FETCH-TODOLISTS',\r\n        todoLists\r\n    } as const;\r\n};\r\nexport const createTodolistAction = (id: string, title: string, addedDate: string, order: number) => {\r\n    return {\r\n        type: 'CREATE-TODOLIST',\r\n        payload: {\r\n            id,\r\n            addedDate,\r\n            order,\r\n            title,\r\n        }\r\n    } as const\r\n};\r\nexport const fetchTodoLists = () => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTodoLists()\r\n        .then(response => dispatch(fetchTodoListsAction(response.data)));\r\n    dispatch(setAppStatusAC('idle'))\r\n};\r\nexport const createTodoListThunk = (todoTitle: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodoList(todoTitle)\r\n        .then(response => {\r\n            if (response.data.resultCode !== 0) {\r\n                dispatch(setAppErrorAC(response.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            } else {\r\n                const {id, addedDate, order, title} = response.data.data.item;\r\n                dispatch(createTodolistAction(id, title, addedDate, order))\r\n                dispatch(setAppStatusAC('idle'))\r\n            }\r\n\r\n        })\r\n};\r\nexport const deleteTodolistThunk = (todoListId: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setEntityStatusAC(todoListId,'loading'))\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.deleteTodoList(todoListId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(RemoveTodolistAC(todoListId))\r\n                dispatch(setAppStatusAC('idle'))\r\n                dispatch(setEntityStatusAC(todoListId,'idle'))\r\n            }\r\n        })\r\n}\r\nexport const changeTodoListTitleThunk = (todoListId: string, title: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.changeTodoListTitle(todoListId, title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(ChangeTodolistTitleAC(todoListId, title))\r\n                dispatch(setAppStatusAC('idle'))\r\n            } else {\r\n                dispatch(setAppErrorAC(response.data.messages[0]))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}","import {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\nimport {RequestStatusType} from \"../state/app-reducer\";\r\n\r\ntype inputType = {\r\n    callBack: (newTitle: string) => void\r\n    variant?: |'standard' | 'filled' | 'outlined' | undefined\r\n    entityStatus?:RequestStatusType\r\n}\r\nexport const AddItemForm = React.memo((props: inputType) => {\r\n    console.log('add form');\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const AddItem =() => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.callBack(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            setError(false);\r\n            AddItem();\r\n        }\r\n    };\r\n    const offMode = () => {\r\n        setError(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n                disabled={props.entityStatus==='loading'}\r\n                size={'small'}\r\n                onBlur={offMode}\r\n                variant={props.variant?props.variant:'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                disabled={props.entityStatus==='loading'}\r\n                style={{margin: '1'}}\r\n                size={'medium'}\r\n                onBlur={offMode}\r\n                color={'primary'}\r\n                onClick={AddItem}>\r\n                <AddBox fontSize={'medium'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChangeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    console.log('Editaple span');\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.ChangeTitle(title);\r\n            setEditMode(false);\r\n        }\r\n    }\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        props.ChangeTitle(title);\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n\r\n","import {ActionsTypes, AppRootStateType} from './store';\r\nimport { TasksStateType } from '../AppWithRedux';\r\nimport {TodolistActionsType} from './todolist-reducer';\r\nimport { taskAPI, TaskPriority, TaskStatuses, TaskType, updateTaskModelType } from '../api/task-api';\r\nimport { Dispatch } from 'redux';\r\nimport {setAppErrorAC, setAppStatusAC} from \"./app-reducer\";\r\n\r\n\r\nexport type TasksActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof fetchTasksAC>\r\n    | TodolistActionsType\r\nconst InitialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = InitialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = { ...state };\r\n            copyState[action.todolistID] = copyState[action.todolistID]\r\n                .filter(task => task.id !== action.taskID);\r\n            return copyState;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            let newTask: TaskType = {\r\n                id: action.taskId,\r\n                title: action.taskTitle,\r\n                addedDate: '',\r\n                completed: false,\r\n                deadline: '',\r\n                description: '',\r\n                order: 0,\r\n                priority: TaskPriority.Hi,\r\n                startDate: '',\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistID\r\n            };\r\n            const tasks = stateCopy[action.todolistID]\r\n            stateCopy[action.todolistID] = [newTask, ...tasks]\r\n            return stateCopy;\r\n        }\r\n        case 'FETCH-TASKS': {\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)]\r\n            };\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID\r\n                    ? {\r\n                        ...t,\r\n                        title:action.title\r\n                    }\r\n                    : t)\r\n            }\r\n        }\r\n        case 'CREATE-TODOLIST': {\r\n            return {\r\n                [action.payload.id]: [],\r\n                ...state,\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'FETCH-TODOLISTS': {\r\n            let stateCopy = { ...state }\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\r\n    return { type: 'REMOVE-TASK', taskID, todolistID } as const;\r\n};\r\nexport const addTaskAC = (newTitle: string, todolistID: string, taskId: string) => {\r\n    return { type: 'ADD-TASK', taskTitle: newTitle, todolistID, taskId } as const;\r\n};\r\nexport const changeTaskStatusAC = (taskID: string, status: TaskStatuses, todolistID: string) => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskID, status, todolistID } as const;\r\n};\r\nexport const changeTaskTitleAC = (taskID: string, todolistID: string, title: string) => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskID, todolistID, title } as const;\r\n};\r\nexport const fetchTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'FETCH-TASKS',\r\n        todolistId,\r\n        tasks\r\n    } as const;\r\n};\r\n\r\nexport const fetchTasksThunk = (todolistId: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(fetchTasksAC(todolistId, response.data.items))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n};\r\nexport const createTaskThunk = (todolistId: string, title: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.createTask(todolistId, title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(response.data.data.item.title, response.data.data.item.todoListId, response.data.data.item.id))\r\n                dispatch(setAppStatusAC('idle'))\r\n            }\r\n            else {\r\n                if(response.data.messages){\r\n                    dispatch(setAppErrorAC(response.data.messages[0]))\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n                dispatch(setAppErrorAC('Some error occurred'))\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n}\r\nexport const deleteTaskThunk = (todoListId: string, taskId: string) => (dispatch: Dispatch<ActionsTypes>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.deleteTask(todoListId, taskId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todoListId))\r\n                dispatch(setAppStatusAC('idle'))\r\n            }\r\n        })\r\n}\r\nexport const updateTaskTitleThunk = (todoListId: string, taskId: string, title: string) => (dispatch: Dispatch<ActionsTypes>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    const state = getState();\r\n    const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        return\r\n    }\r\n    const model: updateTaskModelType = {\r\n        completed: task.completed,\r\n        addedDate: task.addedDate,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        order: task.order,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        status: task.status,\r\n        title\r\n    }\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.updateTaskTitle(todoListId, taskId, model)\r\n        .then(response => {\r\n                dispatch(changeTaskTitleAC(taskId,todoListId,title))\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusThunk = (todoListId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch<ActionsTypes>, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        return\r\n    }\r\n    const model: updateTaskModelType = {\r\n        completed: task.completed,\r\n        addedDate: task.addedDate,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        order: task.order,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        status,\r\n        title:task.title\r\n    }\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.updateTaskStatus(todoListId, taskId, model)\r\n        .then(response => {\r\n                dispatch(changeTaskStatusAC(taskId,status,todoListId))\r\n                console.log(response.data.data)\r\n            dispatch(setAppStatusAC('idle'))\r\n        })\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Checkbox, IconButton, ListItem } from '@material-ui/core';\r\nimport { EditableSpan } from '../EditableSpan';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { TaskStatuses, TaskType } from '../../api/task-api';\r\n\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    ChangeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    ChangeTaskTitle: (todolistId: string, id: string, title: string) => void\r\n    id: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log('Task');\r\n\r\n    const ChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.ChangeTaskStatus(props.task.id, (e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New), props.id);\r\n    };\r\n    const ChangeTitle = (title: string) => {\r\n        props.ChangeTaskTitle(props.id, props.task.id, title);\r\n    };\r\n    const RemoveTaskHandler = () => {\r\n        props.removeTasks(props.task.id, props.id)\r\n    };\r\n    return (\r\n        <ListItem divider={true}\r\n            alignItems={'center'}\r\n            key={props.task.id}>\r\n            <span className={props.task.completed ? 'isActive' : ''}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onChange={ChangeStatus}\r\n                    checked={props.task.status===TaskStatuses.Completed} />\r\n                <EditableSpan ChangeTitle={ChangeTitle}\r\n                    title={props.task.title} />\r\n            </span>\r\n            <IconButton\r\n                color={'secondary'}\r\n                onClick={RemoveTaskHandler}>\r\n                <Delete style={{ fontSize: 20, margin: 10 }} />\r\n            </IconButton>\r\n        </ListItem>);\r\n});\r\n","import React, { ChangeEvent, useCallback, useEffect } from 'react';\r\nimport {filterValuesType, TasksStateType, TodoListDomainType} from '../../AppWithRedux';\r\nimport { AddItemForm } from '../AddItemForm';\r\nimport { EditableSpan } from '../EditableSpan';\r\nimport { Box, Button, Checkbox, IconButton, List, ListItem } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { AppRootStateType } from '../../state/store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TaskStatuses, TaskType } from '../../api/task-api';\r\nimport { deleteTaskThunk, fetchTasksThunk } from '../../state/task-reducer';\r\nimport { Task } from './Task'\r\nimport { updateTaskTitleThunk, updateTaskStatusThunk } from '../../state/task-reducer'\r\nimport {RequestStatusType} from \"../../state/app-reducer\";\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    entityStatus:RequestStatusType\r\n    id: string\r\n    title: string\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, filterValue: filterValuesType) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todolistId: string) => void\r\n    ChangeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('todolist')\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunk(props.id))\r\n    }, [])\r\n    const ChangeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTodolistTitle(props.id, title);\r\n    }, [props.ChangeTodolistTitle, props.id]);\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'ALL');\r\n    }, [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Active');\r\n    }, [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Completed');\r\n    }, [props.changeFilter, props.id]);\r\n    const RemoveTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id);\r\n    }, [props.removeTodoList, props.id]);\r\n    const addTaskItem = (newTitle: string) => {\r\n        props.addTask(newTitle, props.id)\r\n    }\r\n    const ChangeTaskTitle = useCallback((todolistId: string, id: string, title: string) => {\r\n        dispatch(updateTaskTitleThunk(todolistId, id, title));\r\n    }, [dispatch]);\r\n    const removeTasks = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTaskThunk(todolistId, id));\r\n    }, [dispatch]);\r\n    const ChangeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusThunk(todolistId, id, status));\r\n    }, [dispatch]);\r\n\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status===TaskStatuses.New);\r\n\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status===TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div className=\"todoListContainer\">\r\n\r\n        <h3 style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <EditableSpan\r\n                ChangeTitle={ChangeTodolistTitle} title={props.title} />\r\n            <IconButton\r\n                disabled={props.entityStatus==='loading'}\r\n                size={'small'}\r\n                onClick={RemoveTodoList}>\r\n                <Delete style={{ fontSize: 25, margin: 10 }} />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm entityStatus={props.entityStatus} variant={'standard'} callBack={addTaskItem} />\r\n        <List dense={true}>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map((m) => <Task\r\n                    key={m.id}\r\n                    ChangeTaskTitle={ChangeTaskTitle}\r\n                    ChangeTaskStatus={ChangeTaskStatus}\r\n                    removeTasks={removeTasks}\r\n                    id={props.id}\r\n                    task={m}\r\n                />)\r\n            }\r\n\r\n        </List>\r\n        <Box style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n\r\n            <Button\r\n                variant={props.filter === 'ALL' ? 'contained' : 'outlined'}\r\n                size={'small'}\r\n                color={'primary'}\r\n                onClick={onAllClickHandler}\r\n            >ALL</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Active' ? 'contained' : 'outlined'}\r\n                onClick={onActiveClickHandler}>Active</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Completed' ? 'contained' : 'outlined'}\r\n                onClick={onCompletedClickHandler}>Completed</Button>\r\n        </Box>\r\n\r\n    </div>;\r\n});\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../state/store\";\r\nimport {filterValuesType, TodoListDomainType} from \"../AppWithRedux\";\r\nimport {\r\n    ChangeFilterAC,\r\n    changeTodoListTitleThunk,\r\n    createTodoListThunk,\r\n    deleteTodolistThunk,\r\n    fetchTodoLists\r\n} from \"../state/todolist-reducer\";\r\nimport {Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./todolist/Todolist\";\r\nimport {createTaskThunk} from \"../state/task-reducer\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {SetIsLoggedInTC} from \"../state/auth-reducer\";\r\n\r\n\r\nexport const TodoListList = () => {\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n    const removeTodoList = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistThunk(todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback((todolistId: string, filterValue: filterValuesType) => {\r\n        dispatch(ChangeFilterAC(todolistId, filterValue));\r\n    }, [dispatch]);\r\n\r\n\r\n    const ChangeTodolistTitle = useCallback((todoListID: string, title: string) => {\r\n        dispatch(changeTodoListTitleThunk(todoListID, title));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(createTaskThunk(todolistId, newTitle));\r\n    }, [dispatch]);\r\n    const AddTodoList = useCallback((newTitle: string) => {\r\n        dispatch(createTodoListThunk(newTitle));\r\n    }, [dispatch]);\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/Todolist/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container justifyContent={'center'}>\r\n            <AddItemForm callBack={AddTodoList}/>\r\n        </Grid>\r\n        <Container maxWidth={'lg'}>\r\n            <Grid container spacing={5}>\r\n                {\r\n                    todoLists.map(tl => {\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper\r\n                                    elevation={3}\r\n                                    style={{\r\n                                        paddingTop: '0',\r\n                                        margin: '15px',\r\n                                        padding: '10px',\r\n                                        boxSizing: 'border-box'\r\n                                    }}>\r\n                                    <Todolist\r\n                                        entityStatus={tl.entityStatus}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        addTask={addTask}\r\n                                        changeFilter={changeFilter}\r\n                                        filter={tl.filter}\r\n                                        removeTodoList={removeTodoList}\r\n                                        ChangeTodolistTitle={ChangeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>;\r\n                        }\r\n                    )\r\n                }\r\n            </Grid>\r\n        </Container>\r\n\r\n    </>\r\n\r\n};\r\n\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\n\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TodoListType} from './api/todolist-api';\r\nimport {TaskType} from './api/task-api';\r\nimport {RequestStatusType} from \"./state/app-reducer\";\r\nimport {ErrorSnackBar} from \"./components/ErrorSnackBar\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport {Login} from \"./components/Login\";\r\nimport {TodoListList} from \"./components/TodoListList\";\r\nimport {LogOutTC} from \"./state/auth-reducer\";\r\n\r\n\r\nexport type filterValuesType = 'ALL' | 'Active' | 'Completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: filterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const AppWithRedux = React.memo(() => {\r\n    console.log('app');\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch=useDispatch()\r\n    const logOutHandler=useCallback(()=>{\r\n        if(!isLoggedIn)return <Redirect to={'/Todolist/login'}/>\r\n        dispatch(LogOutTC())\r\n    },[isLoggedIn])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{marginBottom: '10px'}} position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton\r\n                        aria-label={'menu'}\r\n                        color={'inherit'}\r\n                        edge={'start'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    {isLoggedIn&&<Button onClick={logOutHandler}\r\n                                          color={'inherit'}>LogOut</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/Todolist'} render={() => <TodoListList/>}/>\r\n                    <Route path={'/Todolist/login'} render={() => <Login/>}/>\r\n                </Switch>\r\n            </Container>\r\n            <ErrorSnackBar/>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TodolistActionsType, TodolistReducer} from './todolist-reducer';\r\nimport {TasksActionsType, tasksReducer} from './task-reducer';\r\nimport thunk from 'redux-thunk'\r\nimport {AppActionsTypes, appReducer} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"./auth-reducer\";\r\n\r\nexport type ActionsTypes= AppActionsTypes|TodolistActionsType|TasksActionsType|AuthActionsType\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodolistReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth:authReducer,\r\n});\r\n\r\n\r\nexport type AppRootStateType= ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppWithRedux/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}