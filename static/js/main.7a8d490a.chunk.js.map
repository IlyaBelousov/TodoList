{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/todolist/Todolist.tsx","state/todolist-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","useState","title","setTitle","error","setError","AddItem","trimmedTitle","trim","callBack","offMode","TextField","size","onBlur","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","style","margin","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","ChangeTitle","onDoubleClick","Todolist","className","display","alignItems","justifyContent","ChangeTodolistTitle","id","removeTodoList","Delete","newTitle","addTask","List","dense","tasks","map","m","ListItem","divider","isDone","Checkbox","ChangeStatusTask","checked","ChangeTaskTitle","removeTasks","Box","Button","filter","changeFilter","todoListID_1","v1","todoListID_2","InitialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","todoLists","todolistId","type","todolistID","taskTitle","addTaskAC","taskID","filterValue","ChangeFilterAC","ChangeTaskStatus","changeTaskStatusAC","changeTaskTitleAC","todoListID","mapedTodoLists","tl","tasksForTodolist","f","Grid","item","Paper","elevation","paddingTop","padding","boxSizing","AppBar","marginBottom","position","Toolbar","aria-label","edge","Menu","Typography","Container","maxWidth","container","action","AddTodolistAC","spacing","rootReducer","combineReducers","todolist","find","newTodolist","copyState","task","newTask","t","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7a8d490a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\n\r\ntype inputType = {\r\n    callBack: (newTitle: string) => void\r\n}\r\nexport const AddItemForm = (props: inputType) => {\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const AddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.callBack(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    };\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            setError(false);\r\n            AddItem();\r\n        }\r\n    };\r\n    const offMode = () => {\r\n        setError(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n\r\n                size={'small'}\r\n                onBlur={offMode}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is reqired'}\r\n            />\r\n            <IconButton\r\n                style={{margin:'1'}}\r\n                size={'medium'}\r\n                onBlur={offMode}\r\n                color={'primary'}\r\n                onClick={AddItem}>\r\n                <AddBox fontSize={'medium'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n};","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChangeTitle:(title:string) => void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.ChangeTitle(title)\r\n            setEditMode(false);\r\n        }\r\n    };\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        props.ChangeTitle(title)\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n        editMode\r\n            ?<TextField\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n            /*? <input autoFocus\r\n                     onBlur={offEditMode}\r\n                     value={title}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={onKeyPressHandler}/>*/\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {filterValuesType} from '../../App';\r\nimport {AddItemForm} from '../AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {Box, Button, Checkbox, Container, IconButton, List, ListItem} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, filterValue: filterValuesType) => void\r\n    ChangeStatusTask: (id: string, isDone: boolean, todolistId: string) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todolistId: string) => void\r\n    ChangeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    ChangeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const ChangeTodolistTitle = (title: string) => {\r\n        props.ChangeTodolistTitle(title, props.id);\r\n    };\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter(props.id, 'ALL');\r\n    };\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter(props.id, 'Active');\r\n    };\r\n    const onCompletedClickHandler = () => {\r\n        props.changeFilter(props.id, 'Completed');\r\n    };\r\n    const RemoveTodoList = () => {\r\n        props.removeTodoList(props.id);\r\n    };\r\n\r\n    return <div className=\"todoListContainer\">\r\n\r\n            <h3 style={{display:'flex',alignItems: 'center',justifyContent: 'center'}}><EditableSpan ChangeTitle={ChangeTodolistTitle} title={props.title}/>\r\n                <IconButton size={'small'}\r\n                     onClick={RemoveTodoList}>\r\n                    <Delete style={{fontSize: 25, margin: 10}}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callBack={(newTitle: string) => props.addTask(newTitle, props.id)}/>\r\n            <List dense={true}>\r\n                {\r\n                    props.tasks.map((m) => {\r\n                        const removeTaskHandler = () => {\r\n                            props.removeTasks(m.id, props.id);\r\n                        };\r\n                        const CheckingHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n                            props.ChangeStatusTask(m.id, event.currentTarget.checked, props.id);\r\n                        };\r\n                        const ChangeTitleHandler = (title: string) => {\r\n                            props.ChangeTaskTitle(m.id, title, props.id);\r\n                        };\r\n\r\n                        return (\r\n                            <ListItem divider={true}\r\n                                style={{justifyContent: 'space-between'}}\r\n                                alignItems={'center'}\r\n                                key={m.id}>\r\n                            <span className={m.isDone ? 'isActive' : ''}>\r\n                                <Checkbox\r\n                                    size={'small'}\r\n                                    color={'primary'}\r\n                                    onChange={CheckingHandler}\r\n                                    checked={m.isDone}/>\r\n                                <EditableSpan ChangeTitle={ChangeTitleHandler} title={m.title}/>\r\n                            </span>\r\n                                <IconButton\r\n                                    color={'secondary'}\r\n                                    onClick={removeTaskHandler}>\r\n                                    <Delete style={{fontSize: 20, margin: 10}}/>\r\n                                </IconButton>\r\n                            </ListItem>);\r\n                    })\r\n                }\r\n\r\n            </List>\r\n            <Box style={{display: 'flex', justifyContent: 'space-between'}}>\r\n\r\n                <Button\r\n                    variant={props.filter === 'ALL' ? 'contained' : 'outlined'}\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onClick={onAllClickHandler}\r\n                >ALL</Button>\r\n                <Button\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    variant={props.filter === 'Active' ? 'contained' : 'outlined'}\r\n                    onClick={onActiveClickHandler}>Active</Button>\r\n                <Button\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    variant={props.filter === 'Completed' ? 'contained' : 'outlined'}\r\n                    onClick={onCompletedClickHandler}>Completed</Button>\r\n\r\n                {/*<button value={'Active'} changeFilter={props.changeFilter} filter={props.filter} id={props.id}/>\r\n            <button value={'Completed'} changeFilter={props.changeFilter} filter={props.filter} id={props.id}/>*/}\r\n                {/*<button value={'Completed'} className={props.filter==='Completed'?'activeFilter':''} onClick={()=> props.changeFilter('Completed',props.id)}>{props.value}</button>*/}\r\n\r\n\r\n                {/*<button className={props.filter==='ALL'?'activeFilter':''} onClick={()=> props.changeFilter('ALL')}>All</button>\r\n            <button className={props.filter==='Active'?'activeFilter':''} onClick={()=> props.changeFilter('Active')}>Active</button>\r\n            <button className={props.filter==='Completed'?'activeFilter':''} onClick={()=> props.changeFilter('Completed')}>Completed</button>*/}\r\n            </Box>\r\n\r\n    </div>;\r\n}\r\n\r\n","import {filterValuesType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeFilterActionType = {\r\n    type: 'CHANGE-FILTER'\r\n    id: string\r\n    filterValue: filterValuesType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type TodolistActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeFilterActionType\r\n    | ChangeTodolistTitleActionType\r\nexport let todoListID_1 = v1();\r\nexport let todoListID_2 = v1();\r\nconst InitialState: Array<TodoListType> = [\r\n    {\r\n        id: todoListID_1,\r\n        title: 'What to learn?',\r\n        filter: 'ALL'\r\n    },\r\n\r\n    {\r\n        id: todoListID_2,\r\n        title: 'What to buy?',\r\n        filter: 'ALL'\r\n    }\r\n];\r\n\r\nexport const TodolistReducer = (state: Array<TodoListType> = InitialState, action: TodolistActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(f => f.id !== action.id);\r\n        case 'CHANGE-FILTER':\r\n            let todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filterValue;\r\n                return [...state];\r\n            } else return state;\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: TodoListType = {\r\n                id: action.id,\r\n                title: action.title,\r\n                filter: 'ALL'\r\n            };\r\n            return [...state, newTodolist];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return (state.map(tl => {\r\n                if (tl.id === action.id) {\r\n                    return {...tl, title: action.title};\r\n                }\r\n                return tl;\r\n            }));\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const RemoveTodolistAC = (todolistID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistID};\r\n};\r\nexport const AddTodolistAC = (newTitle: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', id: v1(), title: newTitle};\r\n};\r\nexport const ChangeFilterAC = (todolistID: string, filterValue: filterValuesType): ChangeFilterActionType => {\r\n    return {type: 'CHANGE-FILTER', id: todolistID, filterValue: filterValue};\r\n};\r\nexport const ChangeTodolistTitleAC = (todolistID: string, newTitle: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistID, title: newTitle};\r\n};","import {TasksStateType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {TaskType} from '../components/todolist/Todolist';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n    todoListID_1,\r\n    todoListID_2\r\n} from './todolist-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todolistID: string\r\n\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    taskTitle: string\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    title: string\r\n    todolistID: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\nconst InitialState: TasksStateType = {\r\n    [todoListID_1]: [\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'ReactJS', isDone: false},\r\n        {id: v1(), title: 'CSS', isDone: true},\r\n        {id: v1(), title: 'Redux', isDone: false}\r\n    ],\r\n    [todoListID_2]: [\r\n        {id: v1(), title: 'Water', isDone: true},\r\n        {id: v1(), title: 'Bread', isDone: true},\r\n        {id: v1(), title: 'Beer', isDone: false},\r\n        {id: v1(), title: 'Milk', isDone: true},\r\n        {id: v1(), title: 'Book', isDone: false}\r\n    ]\r\n};\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = InitialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state};\r\n            copyState[action.todolistID] = copyState[action.todolistID]\r\n                .filter(task => task.id !== action.taskID);\r\n            return copyState;\r\n        }\r\n        case 'ADD-TASK': {\r\n            let newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false};\r\n            return {...state, [action.todolistID]: [newTask, ...state[action.todolistID]]};\r\n\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state, [action.todolistID]: [...state[action.todolistID].map(t => {\r\n                    if (t.id === action.taskID) {\r\n                        return {...t, isDone: action.isDone};\r\n                    }\r\n                    return t;\r\n                })]\r\n            };\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)]\r\n            };\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            debugger\r\n            return {...state, [action.id]: []};\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID: taskID, todolistID: todolistID} as const;\r\n};\r\nexport const addTaskAC = (newTitle: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', taskTitle: newTitle, todolistID} as const;\r\n};\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskID, isDone: isDone, todolistID} as const;\r\n};\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID, title, todolistID} as const;\r\n};\r\n","import React, {useReducer} from 'react';\r\nimport {v1} from 'uuid';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './components/todolist/Todolist';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n    TodolistReducer\r\n} from './state/todolist-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\n\r\nexport type filterValuesType = 'ALL' | 'Active' | 'Completed'\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport function AppWithRedux() {\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n\r\n    const removeTodoList = (todolistId: string) => {\r\n        dispatch(RemoveTodolistAC(todolistId));\r\n    };\r\n    const addTask = (newTitle: string, todolistId: string) => {\r\n        dispatch(addTaskAC(newTitle, todolistId));\r\n    };\r\n    const removeTasks = (id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId));\r\n    };\r\n    const changeFilter = (todolistId: string, filterValue: filterValuesType) => {\r\n        dispatch(ChangeFilterAC(todolistId, filterValue));\r\n    };\r\n    const ChangeTaskStatus = (id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId));\r\n    };\r\n    const ChangeTaskTitle = (id: string, title: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, title, todolistId));\r\n    };\r\n    const AddTodoList = (newTitle: string) => {\r\n        debugger\r\n        const action = AddTodolistAC(newTitle);\r\n        dispatch(action);\r\n    };\r\n    const ChangeTodolistTitle = (title: string, todoListID: string) => {\r\n        dispatch(ChangeTodolistTitleAC(title, todoListID));\r\n    };\r\n    let mapedTodoLists = todolists.map(tl => {\r\n            let tasksForTodolist = tasks[tl.id];\r\n            if (tl.filter === 'Active') {\r\n                tasksForTodolist = tasksForTodolist.filter(f => !f.isDone);\r\n\r\n            }\r\n            if (tl.filter === 'Completed') {\r\n                tasksForTodolist = tasksForTodolist.filter(f => f.isDone);\r\n            }\r\n            return <Grid item key={tl.id}>\r\n                <Paper\r\n                    elevation={3}\r\n                    style={{\r\n                        paddingTop:'0',\r\n                        margin: '15px',\r\n                        padding: '10px',\r\n                        boxSizing: 'border-box'\r\n                    }}>\r\n                    <Todolist\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasksForTodolist}\r\n                        addTask={addTask}\r\n                        removeTasks={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        ChangeStatusTask={ChangeTaskStatus}\r\n                        filter={tl.filter}\r\n                        removeTodoList={removeTodoList}\r\n                        ChangeTaskTitle={ChangeTaskTitle}\r\n                        ChangeTodolistTitle={ChangeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>;\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{marginBottom: '10px'}} position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton\r\n                        aria-label={'menu'}\r\n                        color={'inherit'}\r\n                        edge={'start'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth={'lg'}>\r\n                <Grid container>\r\n                    <AddItemForm callBack={AddTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {mapedTodoLists}\r\n                </Grid>\r\n\r\n            </Container>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {TodolistReducer} from './todolist-reducer';\r\nimport {tasksReducer} from './task-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodolistReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\n\r\nexport type AppRootStateType= ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}