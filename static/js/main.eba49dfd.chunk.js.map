{"version":3,"sources":["serviceWorker.ts","api/task-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","state/task-reducer.ts","components/todolist/Task.tsx","components/todolist/Todolist.tsx","api/todolist-api.ts","state/todolist-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriority","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","AddItem","trimmedTitle","trim","callBack","offMode","TextField","size","onBlur","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","style","margin","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","ChangeTitle","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","taskAPI","todoListId","get","post","taskId","delete","model","put","InitialState","Task","ListItem","divider","alignItems","task","id","className","completed","Checkbox","e","ChangeTaskStatus","checked","Completed","New","status","ChangeTaskTitle","removeTasks","Delete","Todolist","tasks","useSelector","state","dispatch","useDispatch","useEffect","todolistId","then","response","type","fetchTasksAC","data","items","ChangeTodolistTitle","useCallback","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","RemoveTodoList","removeTodoList","getState","find","t","addedDate","deadline","description","order","priority","startDate","taskID","todolistID","changeTaskTitleAC","updateTaskTitleThunk","resultCode","changeTaskStatusAC","updateTaskStatusThunk","tasksForTodolist","filter","f","display","justifyContent","newTitle","addTask","List","dense","map","m","Box","Button","todolistAPI","AppWithRedux","todoLists","filterValue","ChangeFilterAC","todoListID","changeTodoListTitleThunk","item","taskTitle","createTaskThunk","AddTodoList","todoTitle","payload","createTodolistAction","mapedTodoLists","tl","Grid","Paper","elevation","paddingTop","padding","boxSizing","AppBar","marginBottom","position","Toolbar","aria-label","edge","Menu","Typography","Container","maxWidth","container","spacing","rootReducer","combineReducers","action","todolist","copyState","stateCopy","newTask","Hi","newTasks","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.eba49dfd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\nimport { RequestType } from './todolist-api';\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\n\r\nexport enum TaskPriority {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type updateTaskModelType={\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4e9f6c7c-553d-4c3d-8aa0-0bbb01a71677'\r\n    }\r\n});\r\nexport const taskAPI = {\r\n    getTasks: (todoListId: string) => {\r\n        return instance.get<{ items: TaskType[] }>(`${todoListId}/tasks`);\r\n    },\r\n    createTask: (todoListId: string, title: string) => {\r\n        return instance.post<RequestType<{ item: TaskType }>>(`${todoListId}/tasks`, { title })\r\n    },\r\n    deleteTask: (todoListId: string,taskId: string) => {\r\n        return instance.delete<RequestType<{}>>(`${todoListId}/tasks/${taskId}`)\r\n    },\r\n    updateTaskTitle: (todoListId: string, taskId: string, model:updateTaskModelType) => {\r\n        return instance.put<RequestType<{ item: TaskType }>>(`${todoListId}/tasks/${taskId}`,model)\r\n    },\r\n    updateTaskStatus:(todoListId: string, taskId: string, model:updateTaskModelType)=>{\r\n        return instance.put<RequestType<{ item: TaskType }>>(`${todoListId}/tasks/${taskId}`,model)\r\n    }\r\n};","import {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {KeyboardEvent, ChangeEvent, useState} from 'react';\r\n\r\ntype inputType = {\r\n    callBack: (newTitle: string) => void\r\n}\r\nexport const AddItemForm = React.memo((props: inputType) => {\r\n    console.log('add form');\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const AddItem =() => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.callBack(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            setError(false);\r\n            AddItem();\r\n        }\r\n    };\r\n    const offMode = () => {\r\n        setError(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                onBlur={offMode}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is reqired'}\r\n            />\r\n            <IconButton\r\n                style={{margin: '1'}}\r\n                size={'medium'}\r\n                onBlur={offMode}\r\n                color={'primary'}\r\n                onClick={AddItem}>\r\n                <AddBox fontSize={'medium'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChangeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    console.log('Editaple span');\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.ChangeTitle(title);\r\n            setEditMode(false);\r\n        }\r\n    }\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        props.ChangeTitle(title);\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n            />\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n\r\n","import { AppRootStateType } from './store';\r\nimport { TasksStateType } from '../AppWithRedux';\r\nimport { TodolistActionsType } from './todolist-reducer';\r\nimport { taskAPI, TaskPriority, TaskStatuses, TaskType, updateTaskModelType } from '../api/task-api';\r\nimport { Dispatch } from 'redux';\r\n\r\n\r\nexport type TasksActionsType =\r\n    ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof fetchTasksAC>\r\n    | TodolistActionsType\r\nconst InitialState: TasksStateType = {};\r\n\r\nexport const tasksReducer = (state: TasksStateType = InitialState, action: TasksActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = { ...state };\r\n            copyState[action.todolistID] = copyState[action.todolistID]\r\n                .filter(task => task.id !== action.taskID);\r\n            return copyState;\r\n        }\r\n\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state }\r\n            let newTask: TaskType = {\r\n                id: action.taskId,\r\n                title: action.taskTitle,\r\n                addedDate: '',\r\n                completed: false,\r\n                deadline: '',\r\n                description: '',\r\n                order: 0,\r\n                priority: TaskPriority.Hi,\r\n                startDate: '',\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistID\r\n            };\r\n            const tasks = stateCopy[action.todolistID]\r\n            const newTasks = [newTask, ...tasks]\r\n            stateCopy[action.todolistID] = newTasks\r\n            return stateCopy;\r\n        }\r\n        case 'FETCH-TASKS': {\r\n            return { ...state, [action.todolistId]: action.tasks }\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)]\r\n            };\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].map(t => t.id === action.taskID\r\n                    ? {\r\n                        ...t,\r\n                        title:action.title\r\n                    }\r\n                    : t)\r\n            }\r\n        }\r\n        case 'CREATE-TODOLIST': {\r\n            return { [action.payload.id]: [] }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = { ...state };\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        case 'FETCH-TODOLISTS': {\r\n            let stateCopy = { ...state }\r\n            action.todoLists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistID: string) => {\r\n    return { type: 'REMOVE-TASK', taskID, todolistID } as const;\r\n};\r\nexport const addTaskAC = (newTitle: string, todolistID: string, taskId: string) => {\r\n    return { type: 'ADD-TASK', taskTitle: newTitle, todolistID, taskId } as const;\r\n};\r\nexport const changeTaskStatusAC = (taskID: string, status: TaskStatuses, todolistID: string) => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskID, status, todolistID } as const;\r\n};\r\nexport const changeTaskTitleAC = (taskID: string, todolistID: string, title: string) => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskID, todolistID, title } as const;\r\n};\r\nexport const fetchTasksAC = (todolistId: string, tasks: Array<TaskType>) => {\r\n    return {\r\n        type: 'FETCH-TASKS',\r\n        todolistId,\r\n        tasks\r\n    } as const;\r\n};\r\n\r\nexport const fetchTasksThunk = (todolistId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.getTasks(todolistId)\r\n        .then(response => {\r\n            dispatch(fetchTasksAC(todolistId, response.data.items))\r\n        })\r\n};\r\nexport const createTaskThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n    taskAPI.createTask(todolistId, title)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(response.data.data.item.title, response.data.data.item.todoListId, response.data.data.item.id))\r\n            }\r\n        })\r\n}\r\nexport const deleteTaskThunk = (todoListId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    taskAPI.deleteTask(todoListId, taskId)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(removeTaskAC(taskId, todoListId))\r\n            }\r\n        })\r\n}\r\nexport const updateTaskTitleThunk = (todoListId: string, taskId: string, title: string) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        return\r\n    }\r\n    const model: updateTaskModelType = {\r\n        completed: task.completed,\r\n        addedDate: task.addedDate,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        order: task.order,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        status: task.status,\r\n        title\r\n    }\r\n    taskAPI.updateTaskTitle(todoListId, taskId, model)\r\n        .then(response => {\r\n                dispatch(changeTaskTitleAC(taskId,todoListId,title))\r\n        })\r\n}\r\n\r\nexport const updateTaskStatusThunk = (todoListId: string, taskId: string, status: TaskStatuses) => (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    const task = state.tasks[todoListId].find(t => t.id === taskId)\r\n    if (!task) {\r\n        return\r\n    }\r\n    const model: updateTaskModelType = {\r\n        completed: task.completed,\r\n        addedDate: task.addedDate,\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        order: task.order,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        status,\r\n        title:task.title\r\n    }\r\n    taskAPI.updateTaskStatus(todoListId, taskId, model)\r\n        .then(response => {\r\n                dispatch(changeTaskStatusAC(taskId,status,todoListId))\r\n                console.log(response.data.data)\r\n        })\r\n}","import React, { ChangeEvent } from 'react';\r\nimport { Checkbox, IconButton, ListItem } from '@material-ui/core';\r\nimport { EditableSpan } from '../EditableSpan';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { TaskStatuses, TaskType } from '../../api/task-api';\r\n\r\n\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    ChangeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    ChangeTaskTitle: (todolistId: string, id: string, title: string) => void\r\n    id: string\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    console.log('Task');\r\n\r\n    const ChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.ChangeTaskStatus(props.task.id, (e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New), props.id);\r\n    };\r\n    const ChangeTitle = (title: string) => {\r\n        props.ChangeTaskTitle(props.id, props.task.id, title);\r\n    };\r\n    const RemoveTaskHandler = () => {\r\n        props.removeTasks(props.task.id, props.id)\r\n    };\r\n    return (\r\n        <ListItem divider={true}\r\n            alignItems={'center'}\r\n            key={props.task.id}>\r\n            <span className={props.task.completed ? 'isActive' : ''}>\r\n                <Checkbox\r\n                    size={'small'}\r\n                    color={'primary'}\r\n                    onChange={ChangeStatus}\r\n                    checked={props.task.status===TaskStatuses.Completed} />\r\n                <EditableSpan ChangeTitle={ChangeTitle}\r\n                    title={props.task.title} />\r\n            </span>\r\n            <IconButton\r\n                color={'secondary'}\r\n                onClick={RemoveTaskHandler}>\r\n                <Delete style={{ fontSize: 20, margin: 10 }} />\r\n            </IconButton>\r\n        </ListItem>);\r\n});\r\n","import React, { ChangeEvent, useCallback, useEffect } from 'react';\r\nimport { filterValuesType, TasksStateType } from '../../AppWithRedux';\r\nimport { AddItemForm } from '../AddItemForm';\r\nimport { EditableSpan } from '../EditableSpan';\r\nimport { Box, Button, Checkbox, IconButton, List, ListItem } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { AppRootStateType } from '../../state/store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { TaskStatuses, TaskType } from '../../api/task-api';\r\nimport { deleteTaskThunk, fetchTasksThunk } from '../../state/task-reducer';\r\nimport { Task } from './Task'\r\nimport { updateTaskTitleThunk, updateTaskStatusThunk } from '../../state/task-reducer'\r\n\r\n\r\n\r\n\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    changeFilter: (todolistId: string, filterValue: filterValuesType) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todolistId: string) => void\r\n    ChangeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('todolist')\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunk(props.id))\r\n    }, [])\r\n    const ChangeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTodolistTitle(props.id, title);\r\n    }, [props.ChangeTodolistTitle, props.id]);\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'ALL');\r\n    }, [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Active');\r\n    }, [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Completed');\r\n    }, [props.changeFilter, props.id]);\r\n    const RemoveTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id);\r\n    }, [props.removeTodoList, props.id]);\r\n    const addTaskItem = (newTitle: string) => {\r\n        props.addTask(newTitle, props.id)\r\n    }\r\n    const ChangeTaskTitle = useCallback((todolistId: string, id: string, title: string) => {\r\n        dispatch(updateTaskTitleThunk(todolistId, id, title));\r\n    }, [dispatch]);\r\n    const removeTasks = useCallback((id: string, todolistId: string) => {\r\n        dispatch(deleteTaskThunk(todolistId, id));\r\n    }, [dispatch]);\r\n    const ChangeTaskStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n        dispatch(updateTaskStatusThunk(todolistId, id, status));\r\n    }, [dispatch]);\r\n\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status===TaskStatuses.New);\r\n\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.status===TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div className=\"todoListContainer\">\r\n\r\n        <h3 style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n            <EditableSpan\r\n                ChangeTitle={ChangeTodolistTitle} title={props.title} />\r\n            <IconButton size={'small'}\r\n                onClick={RemoveTodoList}>\r\n                <Delete style={{ fontSize: 25, margin: 10 }} />\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={addTaskItem} />\r\n        <List dense={true}>\r\n            {\r\n                tasksForTodolist && tasksForTodolist.map((m) => <Task\r\n                    key={m.id}\r\n                    ChangeTaskTitle={ChangeTaskTitle}\r\n                    ChangeTaskStatus={ChangeTaskStatus}\r\n                    removeTasks={removeTasks}\r\n                    id={props.id}\r\n                    task={m}\r\n                />)\r\n            }\r\n\r\n        </List>\r\n        <Box style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n\r\n            <Button\r\n                variant={props.filter === 'ALL' ? 'contained' : 'outlined'}\r\n                size={'small'}\r\n                color={'primary'}\r\n                onClick={onAllClickHandler}\r\n            >ALL</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Active' ? 'contained' : 'outlined'}\r\n                onClick={onActiveClickHandler}>Active</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Completed' ? 'contained' : 'outlined'}\r\n                onClick={onCompletedClickHandler}>Completed</Button>\r\n        </Box>\r\n\r\n    </div>;\r\n});\r\n\r\n\r\n","import axios from 'axios';\r\n\r\n\r\nexport type TodoListType={\r\n    id:string\r\n    addedDate: string\r\n    order:number\r\n    title:string\r\n}\r\n\r\nexport type RequestType<T> = {\r\n    data: T\r\n    resultCode: number\r\n    messages: Array<string>\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '4e9f6c7c-553d-4c3d-8aa0-0bbb01a71677'\r\n    }\r\n});\r\nexport const todolistAPI = {\r\n    getTodoLists: () => {\r\n        return instance.get('');\r\n    },\r\n    createTodoList: (title: string) => {\r\n        return instance.post<RequestType<{item:TodoListType}>>('', {title});\r\n    },\r\n    deleteTodoList:(todoListId:string)=>{\r\n        return instance.delete<RequestType<{}>>(`${todoListId}`)\r\n    },\r\n    changeTodoListTitle:(todoListId:string,title:string)=>{\r\n        return instance.put<RequestType<{}>>(`${todoListId}`,{title})\r\n    }\r\n};","import {filterValuesType, TodoListDomainType} from '../AppWithRedux';\r\nimport {Dispatch} from 'redux';\r\nimport {todolistAPI} from '../api/todolist-api';\r\n\r\n\r\nexport type TodolistActionsType =\r\n    ReturnType<typeof RemoveTodolistAC>\r\n    | ReturnType<typeof ChangeFilterAC>\r\n    | ReturnType<typeof ChangeTodolistTitleAC>\r\n    | ReturnType<typeof fetchTodoListsAction>\r\n    | ReturnType<typeof createTodolistAction>\r\n\r\nconst InitialState: Array<TodoListDomainType> = [];\r\n\r\nexport const TodolistReducer = (state: Array<TodoListDomainType> = InitialState, action: TodolistActionsType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(f => f.id !== action.id);\r\n        }\r\n        case 'CHANGE-FILTER': {\r\n            let todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filterValue;\r\n                return [...state];\r\n            } else return state;\r\n        }\r\n        case 'CREATE-TODOLIST':{\r\n            return [...state,{...action.payload,filter:'ALL'}]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, title: action.title}\r\n                : tl);\r\n        }\r\n        case 'FETCH-TODOLISTS': {\r\n            return action.todoLists;\r\n        }\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const RemoveTodolistAC = (todolistID: string) => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistID} as const;\r\n};\r\n\r\nexport const ChangeFilterAC = (todolistID: string, filterValue: filterValuesType) => {\r\n    return {type: 'CHANGE-FILTER', id: todolistID, filterValue: filterValue} as const;\r\n};\r\nexport const ChangeTodolistTitleAC = (todolistID: string, newTitle: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistID, title: newTitle} as const;\r\n};\r\nexport const fetchTodoListsAction = (todoLists: Array<TodoListDomainType>) => {\r\n    return {\r\n        type: 'FETCH-TODOLISTS',\r\n        todoLists\r\n    } as const;\r\n};\r\nexport const createTodolistAction = (id: string, title: string, addedDate: string, order: number) => {\r\n    return {\r\n        type: 'CREATE-TODOLIST',\r\n        payload:{\r\n            id,\r\n            addedDate,\r\n            order,\r\n            title,\r\n\r\n        }\r\n    } as const\r\n};\r\nexport const fetchTodoLists = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodoLists()\r\n        .then(response => dispatch(fetchTodoListsAction(response.data)));\r\n};\r\nexport const createTodoListThunk = (todoTitle: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodoList(todoTitle)\r\n        .then(response => {\r\n            debugger\r\n            const {id, addedDate, order, title} = response.data.data.item;\r\n            dispatch(createTodolistAction(id,title,addedDate,order))\r\n        });\r\n};\r\nexport const deleteTodolistThunk=(todoListId:string)=>(dispatch: Dispatch)=>{\r\n    todolistAPI.deleteTodoList(todoListId)\r\n        .then(response=>{\r\n            if(response.data.resultCode===0){\r\n                dispatch(RemoveTodolistAC(todoListId))\r\n            }\r\n        })\r\n}\r\nexport const changeTodoListTitleThunk=(todoListId:string,title:string)=>(dispatch: Dispatch)=>{\r\n    debugger\r\n    todolistAPI.changeTodoListTitle(todoListId,title)\r\n        .then(response=>{\r\n            if(response.data.resultCode===0){\r\n                dispatch(ChangeTodolistTitleAC(todoListId,title))\r\n            }\r\n        })\r\n}","import React, { useCallback, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './components/todolist/Todolist';\r\nimport { AddItemForm } from './components/AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {\r\n    ChangeFilterAC, changeTodoListTitleThunk, createTodoListThunk, deleteTodolistThunk, fetchTodoLists,\r\n} from './state/todolist-reducer';\r\nimport {  changeTaskStatusAC, createTaskThunk, removeTaskAC } from './state/task-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TodoListType } from './api/todolist-api';\r\nimport { TaskType } from './api/task-api';\r\n\r\n\r\n\r\nexport type filterValuesType = 'ALL' | 'Active' | 'Completed'\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: filterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport const AppWithRedux = React.memo(() => {\r\n    console.log('app');\r\n    const todoLists = useSelector<AppRootStateType, Array<TodoListDomainType>>(state => state.todoLists);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(fetchTodoLists())\r\n    }, [])\r\n\r\n\r\n    const removeTodoList = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistThunk(todolistId));\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback((todolistId: string, filterValue: filterValuesType) => {\r\n        dispatch(ChangeFilterAC(todolistId, filterValue));\r\n    }, [dispatch]);\r\n    \r\n    \r\n    const ChangeTodolistTitle = useCallback((todoListID: string, title: string) => {\r\n        dispatch(changeTodoListTitleThunk(todoListID, title));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(createTaskThunk(todolistId, newTitle));\r\n    }, [dispatch]);\r\n    const AddTodoList = useCallback((newTitle: string) => {\r\n        dispatch(createTodoListThunk(newTitle));\r\n    }, [dispatch]);\r\n    let mapedTodoLists = todoLists.map(tl => {\r\n        return <Grid item key={tl.id}>\r\n            <Paper\r\n                elevation={3}\r\n                style={{\r\n                    paddingTop: '0',\r\n                    margin: '15px',\r\n                    padding: '10px',\r\n                    boxSizing: 'border-box'\r\n                }}>\r\n                <Todolist\r\n                    id={tl.id}\r\n                    title={tl.title}\r\n                    addTask={addTask}\r\n                    changeFilter={changeFilter}\r\n                    filter={tl.filter}\r\n                    removeTodoList={removeTodoList}\r\n                    ChangeTodolistTitle={ChangeTodolistTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>;\r\n    }\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{ marginBottom: '10px' }} position={'static'}>\r\n                <Toolbar style={{ justifyContent: 'space-between' }}>\r\n                    <IconButton\r\n                        aria-label={'menu'}\r\n                        color={'inherit'}\r\n                        edge={'start'}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth={'lg'}>\r\n                <Grid container>\r\n                    <AddItemForm callBack={AddTodoList} />\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {mapedTodoLists}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n});\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {TodolistReducer} from './todolist-reducer';\r\nimport {tasksReducer} from './task-reducer';\r\nimport thunk from 'redux-thunk'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodolistReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\n\r\nexport type AppRootStateType= ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}