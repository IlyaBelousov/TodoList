{"version":3,"sources":["serviceWorker.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/todolist/Todolist.tsx","state/todolist-reducer.ts","state/task-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","AddItem","trimmedTitle","trim","callBack","offMode","TextField","size","onBlur","variant","value","onChange","event","currentTarget","onKeyPress","key","label","helperText","IconButton","style","margin","color","onClick","AddBox","fontSize","EditableSpan","editMode","setEditMode","autoFocus","ChangeTitle","onDoubleClick","Todolist","ChangeTodolistTitle","useCallback","id","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","RemoveTodoList","removeTodoList","AddTask","newTitle","addTask","tasksForTodolist","tasks","filter","f","isDone","className","display","alignItems","justifyContent","Delete","List","dense","map","m","Task","ChangeTaskTitle","ChangeStatusTask","removeTasks","task","Box","Button","removeTaskHandler","CheckingHandler","checked","ChangeTitleHandler","ListItem","divider","Checkbox","InitialState","AppWithRedux","dispatch","useDispatch","todolists","useSelector","state","todoLists","todolistId","type","taskID","todolistID","filterValue","ChangeFilterAC","ChangeTaskStatus","changeTaskStatusAC","changeTaskTitleAC","todoListID","taskTitle","addTaskAC","AddTodoList","action","v1","AddTodolistAC","mapedTodoLists","tl","Grid","item","Paper","elevation","paddingTop","padding","boxSizing","AppBar","marginBottom","position","Toolbar","aria-label","edge","Menu","Typography","Container","maxWidth","container","spacing","rootReducer","combineReducers","todolist","find","newTodolist","copyState","newTask","t","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0QAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCXOC,EAAcC,IAAMC,MAAK,SAACC,GACnCC,QAAQC,IAAI,YACZ,MAAwBC,mBAAS,IAAjC,mBAAKC,EAAL,KAAYC,EAAZ,KACA,EAAwBF,oBAAkB,GAA1C,mBAAKG,EAAL,KAAYC,EAAZ,KAMMC,EAAS,WACX,IAAMC,EAAeL,EAAMM,OACvBD,GACAT,EAAMW,SAASF,GACfJ,EAAS,KAETE,GAAS,IASXK,EAAU,WACZL,GAAS,IAEb,OACI,6BACI,kBAACM,EAAA,EAAD,CACIC,KAAM,QACNC,OAAQH,EACRI,QAAS,WACTC,MAAOb,EACPc,SA7BY,SAACC,GACrBZ,GAAS,GACTF,EAASc,EAAMC,cAAcH,QA4BrBI,WAjBc,SAACF,GACL,UAAdA,EAAMG,MACNf,GAAS,GACTC,MAeIe,MAAO,QACPjB,MAAOA,EACPkB,WAAYlB,GAAS,qBAEzB,kBAACmB,EAAA,EAAD,CACIC,MAAO,CAACC,OAAQ,KAChBb,KAAM,SACNC,OAAQH,EACRgB,MAAO,UACPC,QAASrB,GACT,kBAACsB,EAAA,EAAD,CAAQC,SAAU,gBC7CrBC,EAAelC,IAAMC,MAAK,SAACC,GACpCC,QAAQC,IAAI,iBACZ,MAAgCC,oBAAkB,GAAlD,mBAAO8B,EAAP,KAAiBC,EAAjB,KACA,EAA0B/B,mBAAiBH,EAAMI,OAAjD,mBAAOA,EAAP,KAAcC,EAAd,KAeA,OACI4B,EACM,kBAACpB,EAAA,EAAD,CACEsB,WAAS,EACTpB,OARQ,WAChBf,EAAMoC,YAAYhC,GAClB8B,GAAY,IAOJjB,MAAOb,EACPc,SApBY,SAACC,GACrBd,EAASc,EAAMC,cAAcH,QAoBrBI,WAlBc,SAACF,GACL,UAAdA,EAAMG,MACNtB,EAAMoC,YAAYhC,GAClB8B,GAAY,OAiBV,0BAAMG,cAdG,kBAAMH,GAAY,KAcOlC,EAAMI,U,sDCNzCkC,EAAWxC,IAAMC,MAAK,SAACC,GAChCC,QAAQC,IAAI,YACZ,IAAMqC,EAAsBC,uBAAY,SAACpC,GACrCJ,EAAMuC,oBAAoBvC,EAAMyC,GAAIrC,KACrC,CAACJ,EAAMuC,oBAAqBvC,EAAMyC,KAC/BC,EAAoBF,uBAAY,WAClCxC,EAAM2C,aAAa3C,EAAMyC,GAAI,SAC9B,CAACzC,EAAM2C,aAAc3C,EAAMyC,KACxBG,EAAuBJ,uBAAY,WACrCxC,EAAM2C,aAAa3C,EAAMyC,GAAI,YAC9B,CAACzC,EAAM2C,aAAc3C,EAAMyC,KACxBI,EAA0BL,uBAAY,WACxCxC,EAAM2C,aAAa3C,EAAMyC,GAAI,eAC9B,CAACzC,EAAM2C,aAAc3C,EAAMyC,KACxBK,EAAiBN,uBAAY,WAC/BxC,EAAM+C,eAAe/C,EAAMyC,MAC5B,CAACzC,EAAM+C,eAAgB/C,EAAMyC,KAC1BO,EAAUR,uBAAY,SAACS,GACzBjD,EAAMkD,QAAQD,EAAUjD,EAAMyC,MAC/B,CAACzC,EAAMkD,QAASlD,EAAMyC,KAErBU,EAAmBnD,EAAMoD,MAAMpD,EAAMyC,IASzC,MARqB,WAAjBzC,EAAMqD,SACNF,EAAmBA,EAAiBE,QAAO,SAAAC,GAAC,OAAKA,EAAEC,WAGlC,cAAjBvD,EAAMqD,SACNF,EAAmBA,EAAiBE,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAG/C,yBAAKC,UAAU,qBAElB,wBAAI9B,MAAO,CAAC+B,QAAS,OAAQC,WAAY,SAAUC,eAAgB,WAC/D,kBAAC3B,EAAD,CACII,YAAaG,EAAqBnC,MAAOJ,EAAMI,QACnD,kBAACqB,EAAA,EAAD,CAAYX,KAAM,QACNe,QAASiB,GACjB,kBAACc,EAAA,EAAD,CAAQlC,MAAO,CAACK,SAAU,GAAIJ,OAAQ,QAG9C,kBAAC9B,EAAD,CAAac,SAAUqC,IACvB,kBAACa,EAAA,EAAD,CAAMC,OAAO,GAELX,EAAiBY,KAAI,SAACC,GAAD,OAAO,kBAACC,EAAD,CACxB3C,IAAK0C,EAAEvB,GACPyB,gBAAiBlE,EAAMkE,gBACvBC,iBAAkBnE,EAAMmE,iBACxBC,YAAapE,EAAMoE,YACnB3B,GAAIzC,EAAMyC,GACV4B,KAAML,EACNd,QAASlD,EAAMkD,cAK3B,kBAACoB,EAAA,EAAD,CAAK5C,MAAO,CAAC+B,QAAS,OAAQE,eAAgB,kBAE1C,kBAACY,EAAA,EAAD,CACIvD,QAA0B,QAAjBhB,EAAMqD,OAAmB,YAAc,WAChDvC,KAAM,QACNc,MAAO,UACPC,QAASa,GAJb,OAMA,kBAAC6B,EAAA,EAAD,CACIzD,KAAM,QACNc,MAAO,UACPZ,QAA0B,WAAjBhB,EAAMqD,OAAsB,YAAc,WACnDxB,QAASe,GAJb,UAKA,kBAAC2B,EAAA,EAAD,CACIzD,KAAM,QACNc,MAAO,UACPZ,QAA0B,cAAjBhB,EAAMqD,OAAyB,YAAc,WACtDxB,QAASgB,GAJb,kBAmBNoB,EAAOnE,IAAMC,MAAK,SAACC,GACrB,IAAMwE,EAAoBhC,uBAAY,WAClCxC,EAAMoE,YAAYpE,EAAMqE,KAAK5B,GAAIzC,EAAMyC,MACxC,CAACzC,EAAMoE,cACJK,EAAkBjC,uBAAY,SAACrB,GAEjCnB,EAAMmE,iBAAiBnE,EAAMqE,KAAK5B,GAAItB,EAAMC,cAAcsD,QAAS1E,EAAMyC,MAC1E,CAACzC,EAAMmE,mBACJQ,EAAqBnC,uBAAY,SAACpC,GACpCJ,EAAMkE,gBAAgBlE,EAAMqE,KAAK5B,GAAIrC,EAAOJ,EAAMyC,MACnD,CAACzC,EAAMkE,kBAEV,OACI,kBAACU,EAAA,EAAD,CAAUC,SAAS,EACTnD,MAAO,CAACiC,eAAgB,iBACxBD,WAAY,SACZpC,IAAKtB,EAAMqE,KAAK5B,IACN,0BAAMe,UAAWxD,EAAMqE,KAAKd,OAAS,WAAa,IAC9C,kBAACuB,EAAA,EAAD,CACIhE,KAAM,QACNc,MAAO,UACPV,SAAUuD,EACVC,QAAS1E,EAAMqE,KAAKd,SACxB,kBAACvB,EAAD,CAAcI,YAAauC,EAAoBvE,MAAOJ,EAAMqE,KAAKjE,SAErF,kBAACqB,EAAA,EAAD,CACIG,MAAO,YACPC,QAAS2C,GACT,kBAACZ,EAAA,EAAD,CAAQlC,MAAO,CAACK,SAAU,GAAIJ,OAAQ,W,sFCpHhDoD,EAAoC,G,QCapCA,EAA+B,G,QCd9B,SAASC,IACZ/E,QAAQC,IAAI,OACZ,IAAM+E,EAAWC,cACXC,EAAYC,aAAmD,SAAAC,GAAK,OAAIA,EAAMC,aAC9ElC,EAAQgC,aAA8C,SAAAC,GAAK,OAAIA,EAAMjC,SACrEL,EAAiBP,uBAAY,SAAC+C,GAChCN,EFuBG,CAACO,KAAM,kBAAmB/C,GEvBH8C,MAC3B,CAACN,IACEb,EAAc5B,uBAAY,SAACC,EAAY8C,GACzCN,EDqDG,CAACO,KAAM,cAAeC,OCrDHhD,EDqDmBiD,WCrDfH,MAC3B,CAACN,IACEtC,EAAeH,uBAAY,SAAC+C,EAAoBI,GAClDV,EFsBsB,SAACS,EAAoBC,GAC/C,MAAO,CAACH,KAAM,gBAAiB/C,GAAIiD,EAAYC,YAAaA,GEvB/CC,CAAeL,EAAYI,MACrC,CAACV,IACEY,EAAmBrD,uBAAY,SAACC,EAAYc,EAAiBgC,GAC/DN,EDoD0B,SAACQ,EAAgBlC,EAAiBmC,GAChE,MAAO,CAACF,KAAM,qBAAsBC,SAAQlC,OAAQA,EAAQmC,cCrD/CI,CAAmBrD,EAAIc,EAAQgC,MACzC,CAACN,IACEf,EAAkB1B,uBAAY,SAACC,EAAYrC,EAAemF,GAC5DN,EDoDyB,SAACQ,EAAgBrF,EAAesF,GAC7D,MAAO,CAACF,KAAM,oBAAqBC,SAAQrF,QAAOsF,cCrDrCK,CAAkBtD,EAAIrC,EAAOmF,MACvC,CAACN,IACE1C,EAAsBC,uBAAY,SAAEwD,EAAmB5F,GACzD6E,EFiBG,CAACO,KAAM,wBAAyB/C,GEjBJuD,EFiBoB5F,MEjBTA,MAC3C,CAAC6E,IAEE/B,EAAUV,uBAAY,SAACS,EAAkBsC,GAC3CN,EDuCiB,SAAChC,EAAkByC,GACxC,MAAO,CAACF,KAAM,WAAYS,UAAWhD,EAAUyC,cCxClCQ,CAAUjD,EAAUsC,MAC9B,CAACN,IACEkB,EAAc3D,uBAAY,SAACS,GAC7B,IAAMmD,EFGe,SAACnD,GAC1B,MAAO,CAACuC,KAAM,eAAgB/C,GAAI4D,eAAMjG,MAAO6C,GEJ5BqD,CAAcrD,GAC7BgC,EAASmB,KACV,CAACnB,IACAsB,EAAiBpB,EAAUpB,KAAI,SAAAyC,GAC3B,OAAO,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACpF,IAAKkF,EAAG/D,IACtB,kBAACkE,EAAA,EAAD,CACIC,UAAW,EACXlF,MAAO,CACHmF,WAAY,IACZlF,OAAQ,OACRmF,QAAS,OACTC,UAAW,eAEf,kBAACzE,EAAD,CACIG,GAAI+D,EAAG/D,GACPrC,MAAOoG,EAAGpG,MACVgD,MAAOA,EACPF,QAASA,EACTkB,YAAaA,EACbzB,aAAcA,EACdwB,iBAAkB0B,EAClBxC,OAAQmD,EAAGnD,OACXN,eAAgBA,EAChBmB,gBAAiBA,EACjB3B,oBAAqBA,SAOzC,OACI,yBAAKiB,UAAU,OACX,kBAACwD,EAAA,EAAD,CAAQtF,MAAO,CAACuF,aAAc,QAASC,SAAU,UAC7C,kBAACC,EAAA,EAAD,CAASzF,MAAO,CAACiC,eAAgB,kBAC7B,kBAAClC,EAAA,EAAD,CACI2F,aAAY,OACZxF,MAAO,UACPyF,KAAM,SACN,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYvG,QAAS,MAArB,aAGA,kBAACuD,EAAA,EAAD,CAAQ3C,MAAO,WAAf,WAIR,kBAAC4F,EAAA,EAAD,CAAWC,SAAU,MACjB,kBAAChB,EAAA,EAAD,CAAMiB,WAAS,GACX,kBAAC7H,EAAD,CAAac,SAAUwF,KAE3B,kBAACM,EAAA,EAAD,CAAMiB,WAAS,EAACC,QAAS,GACpBpB,K,YCvGfqB,EAAcC,YAAgB,CAChCvC,UHwB2B,WAAkG,IAAjGD,EAAgG,uDAAnEN,EAAcqB,EAAqD,uCAC5H,OAAQA,EAAOZ,MACX,IAAK,kBACD,OAAOH,EAAMhC,QAAO,SAAAC,GAAC,OAAIA,EAAEb,KAAO2D,EAAO3D,MAC7C,IAAK,gBACD,IAAIqF,EAAWzC,EAAM0C,MAAK,SAAAvB,GAAE,OAAIA,EAAG/D,KAAO2D,EAAO3D,MACjD,OAAIqF,GACAA,EAASzE,OAAS+C,EAAOT,YAClB,YAAIN,IACDA,EAClB,IAAK,eACD,IAAM2C,EAA4B,CAC9BvF,GAAI2D,EAAO3D,GACXrC,MAAOgG,EAAOhG,MACdiD,OAAQ,OAEZ,MAAM,GAAN,mBAAWgC,GAAX,CAAkB2C,IACtB,IAAK,wBACD,OAAO3C,EAAMtB,KAAI,SAAAyC,GAAE,OAAIA,EAAG/D,KAAO2D,EAAO3D,GAAjB,2BACb+D,GADa,IACTpG,MAAOgG,EAAOhG,QACtBoG,KACV,QACI,OAAOnB,IG7CfjC,MFqCwB,WAAgF,IAA/EiC,EAA8E,uDAAtDN,EAAcqB,EAAwC,uCACvG,OAAQA,EAAOZ,MACX,IAAK,cACD,IAAIyC,EAAS,eAAO5C,GAGpB,OAFA4C,EAAU7B,EAAOV,YAAcuC,EAAU7B,EAAOV,YAC3CrC,QAAO,SAAAgB,GAAI,OAAIA,EAAK5B,KAAO2D,EAAOX,UAChCwC,EAEX,IAAK,WACD,IAAIC,EAAoB,CAACzF,GAAI4D,eAAMjG,MAAOgG,EAAOH,UAAW1C,QAAQ,GACpE,OAAO,2BAAI8B,GAAX,kBAAmBe,EAAOV,WAA1B,CAAwCwC,GAAxC,mBAAoD7C,EAAMe,EAAOV,gBAGrE,IAAK,qBACD,OAAO,2BACAL,GADP,kBAEKe,EAAOV,WAFZ,YAE6BL,EAAMe,EAAOV,YAAY3B,KAAI,SAAAoE,GAAC,OAAIA,EAAE1F,KAAO2D,EAAOX,OAAhB,2BACpD0C,GADoD,IAEvD5E,OAAQ6C,EAAO7C,SACf4E,QAGZ,IAAK,oBACD,OAAO,2BACA9C,GADP,kBAEKe,EAAOV,WAFZ,YAE6BL,EAAMe,EAAOV,YAAY3B,KAAI,SAAAoE,GAAC,OAAIA,EAAE1F,KAAO2D,EAAOX,OAAhB,2BACpD0C,GADoD,IAEvD/H,MAAOgG,EAAOhG,QACd+H,QAGZ,IAAK,eACD,OAAO,2BAAI9C,GAAX,kBAAmBe,EAAO3D,GAAK,KAEnC,IAAK,kBACD,IAAIwF,EAAS,eAAO5C,GAEpB,cADO4C,EAAU7B,EAAO3D,IACjBwF,EAGX,QACI,OAAO5C,MEzEN+C,EAAQC,YAAYT,GAEjCnI,OAAO2I,MAAQA,ECLfE,IAASC,OACL,kBAAC,IAAD,CAAUH,MAAOA,GACjB,kBAACpD,EAAD,OAEGwD,SAASC,eAAe,SR8HzB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1I,GACLL,QAAQK,MAAMA,EAAM2I,c","file":"static/js/main.8d0fe90e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport React, {KeyboardEvent, ChangeEvent, useState, useCallback} from 'react';\r\n\r\ntype inputType = {\r\n    callBack: (newTitle: string) => void\r\n}\r\nexport const AddItemForm = React.memo((props: inputType) => {\r\n    console.log('add form');\r\n    let [title, setTitle] = useState('');\r\n    let [error, setError] = useState<boolean>(false);\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false);\r\n        setTitle(event.currentTarget.value);\r\n    };\r\n    const AddItem =() => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.callBack(trimmedTitle);\r\n            setTitle('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            setError(false);\r\n            AddItem();\r\n        }\r\n    };\r\n    const offMode = () => {\r\n        setError(false);\r\n    };\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                onBlur={offMode}\r\n                variant={'outlined'}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                label={'Title'}\r\n                error={error}\r\n                helperText={error && 'Title is reqired'}\r\n            />\r\n            <IconButton\r\n                style={{margin: '1'}}\r\n                size={'medium'}\r\n                onBlur={offMode}\r\n                color={'primary'}\r\n                onClick={AddItem}>\r\n                <AddBox fontSize={'medium'}/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import TextField from '@material-ui/core/TextField';\r\nimport React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    ChangeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n    console.log('Editaple span');\r\n    const [editMode, setEditMode] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>(props.title);\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value);\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        if (event.key === 'Enter') {\r\n            props.ChangeTitle(title);\r\n            setEditMode(false);\r\n        }\r\n    }\r\n    const onEditMode = () => setEditMode(true);\r\n    const offEditMode = () => {\r\n        props.ChangeTitle(title);\r\n        setEditMode(false);\r\n    }\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                autoFocus\r\n                onBlur={offEditMode}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}/>\r\n\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    );\r\n});\r\n\r\n","import React, {ChangeEvent, useCallback} from 'react';\r\nimport {filterValuesType} from '../../AppWithRedux';\r\nimport {AddItemForm} from '../AddItemForm';\r\nimport {EditableSpan} from '../EditableSpan';\r\nimport {Box, Button, Checkbox, IconButton, List, ListItem} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {TasksStateType} from '../../AppWithRedux';\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: TasksStateType\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    ChangeStatusTask: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeFilter: (todolistId: string, filterValue: filterValuesType) => void\r\n    filter: filterValuesType\r\n    removeTodoList: (todolistId: string) => void\r\n    ChangeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    ChangeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('todolist');\r\n    const ChangeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTodolistTitle(props.id, title);\r\n    }, [props.ChangeTodolistTitle, props.id]);\r\n    const onAllClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'ALL');\r\n    }, [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Active');\r\n    }, [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => {\r\n        props.changeFilter(props.id, 'Completed');\r\n    }, [props.changeFilter, props.id]);\r\n    const RemoveTodoList = useCallback(() => {\r\n        props.removeTodoList(props.id);\r\n    }, [props.removeTodoList, props.id]);\r\n    const AddTask = useCallback((newTitle: string) => {\r\n        props.addTask(newTitle, props.id);\r\n    }, [props.addTask, props.id]);\r\n\r\n    let tasksForTodolist = props.tasks[props.id];\r\n    if (props.filter === 'Active') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => !f.isDone);\r\n\r\n    }\r\n    if (props.filter === 'Completed') {\r\n        tasksForTodolist = tasksForTodolist.filter(f => f.isDone);\r\n    }\r\n\r\n    return <div className=\"todoListContainer\">\r\n\r\n        <h3 style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\r\n            <EditableSpan\r\n                ChangeTitle={ChangeTodolistTitle} title={props.title}/>\r\n            <IconButton size={'small'}\r\n                        onClick={RemoveTodoList}>\r\n                <Delete style={{fontSize: 25, margin: 10}}/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm callBack={AddTask}/>\r\n        <List dense={true}>\r\n            {\r\n                tasksForTodolist.map((m) => <Task\r\n                    key={m.id}\r\n                    ChangeTaskTitle={props.ChangeTaskTitle}\r\n                    ChangeStatusTask={props.ChangeStatusTask}\r\n                    removeTasks={props.removeTasks}\r\n                    id={props.id}\r\n                    task={m}\r\n                    addTask={props.addTask}\r\n                />)\r\n            }\r\n\r\n        </List>\r\n        <Box style={{display: 'flex', justifyContent: 'space-between'}}>\r\n\r\n            <Button\r\n                variant={props.filter === 'ALL' ? 'contained' : 'outlined'}\r\n                size={'small'}\r\n                color={'primary'}\r\n                onClick={onAllClickHandler}\r\n            >ALL</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Active' ? 'contained' : 'outlined'}\r\n                onClick={onActiveClickHandler}>Active</Button>\r\n            <Button\r\n                size={'small'}\r\n                color={'primary'}\r\n                variant={props.filter === 'Completed' ? 'contained' : 'outlined'}\r\n                onClick={onCompletedClickHandler}>Completed</Button>\r\n        </Box>\r\n\r\n    </div>;\r\n});\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    addTask: (newTitle: string, todolistId: string) => void\r\n    removeTasks: (id: string, todolistId: string) => void\r\n    ChangeStatusTask: (id: string, isDone: boolean, todolistId: string) => void\r\n    ChangeTaskTitle: (id: string, title: string, todolistId: string) => void\r\n    id: string\r\n}\r\n\r\nconst Task = React.memo((props: TaskPropsType) => {\r\n    const removeTaskHandler = useCallback(() => {\r\n        props.removeTasks(props.task.id, props.id);\r\n    }, [props.removeTasks]);\r\n    const CheckingHandler = useCallback((event: ChangeEvent<HTMLInputElement>) => {\r\n        debugger\r\n        props.ChangeStatusTask(props.task.id, event.currentTarget.checked, props.id);\r\n    }, [props.ChangeStatusTask]);\r\n    const ChangeTitleHandler = useCallback((title: string) => {\r\n        props.ChangeTaskTitle(props.task.id, title, props.id);\r\n    }, [props.ChangeTaskTitle]);\r\n\r\n    return (\r\n        <ListItem divider={true}\r\n                  style={{justifyContent: 'space-between'}}\r\n                  alignItems={'center'}\r\n                  key={props.task.id}>\r\n                            <span className={props.task.isDone ? 'isActive' : ''}>\r\n                                <Checkbox\r\n                                    size={'small'}\r\n                                    color={'primary'}\r\n                                    onChange={CheckingHandler}\r\n                                    checked={props.task.isDone}/>\r\n                                <EditableSpan ChangeTitle={ChangeTitleHandler} title={props.task.title}/>\r\n                            </span>\r\n            <IconButton\r\n                color={'secondary'}\r\n                onClick={removeTaskHandler}>\r\n                <Delete style={{fontSize: 20, margin: 10}}/>\r\n            </IconButton>\r\n        </ListItem>);\r\n});\r\n\r\n","import {filterValuesType, TodoListType} from '../AppWithRedux';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    id: string\r\n}\r\nexport type ChangeFilterActionType = {\r\n    type: 'CHANGE-FILTER'\r\n    id: string\r\n    filterValue: filterValuesType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type TodolistActionsType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeFilterActionType\r\n    | ChangeTodolistTitleActionType\r\n\r\nconst InitialState: Array<TodoListType> = [];\r\n\r\nexport const TodolistReducer = (state: Array<TodoListType> = InitialState, action: TodolistActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(f => f.id !== action.id);\r\n        case 'CHANGE-FILTER':\r\n            let todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filterValue;\r\n                return [...state];\r\n            } else return state;\r\n        case 'ADD-TODOLIST':\r\n            const newTodolist: TodoListType = {\r\n                id: action.id,\r\n                title: action.title,\r\n                filter: 'ALL'\r\n            };\r\n            return [...state, newTodolist];\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, title: action.title}\r\n                : tl)\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const RemoveTodolistAC = (todolistID: string): RemoveTodolistActionType => {\r\n    return {type: 'REMOVE-TODOLIST', id: todolistID};\r\n};\r\nexport const AddTodolistAC = (newTitle: string): AddTodolistActionType => {\r\n    return {type: 'ADD-TODOLIST', id: v1(), title: newTitle};\r\n};\r\nexport const ChangeFilterAC = (todolistID: string, filterValue: filterValuesType): ChangeFilterActionType => {\r\n    return {type: 'CHANGE-FILTER', id: todolistID, filterValue: filterValue};\r\n};\r\nexport const ChangeTodolistTitleAC = (todolistID: string, newTitle: string): ChangeTodolistTitleActionType => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', id: todolistID, title: newTitle};\r\n};","import {TasksStateType} from '../AppWithRedux';\r\nimport {v1} from 'uuid';\r\nimport {TaskType} from '../components/todolist/Todolist';\r\nimport {\r\n    AddTodolistActionType,\r\n    RemoveTodolistActionType,\r\n\r\n} from './todolist-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todolistID: string\r\n\r\n}\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    taskTitle: string\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    taskID: string\r\n    isDone: boolean\r\n    todolistID: string\r\n}\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    taskID: string\r\n    title: string\r\n    todolistID: string\r\n}\r\n\r\n\r\nexport type ActionsType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\nconst InitialState: TasksStateType = {};\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = InitialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let copyState = {...state};\r\n            copyState[action.todolistID] = copyState[action.todolistID]\r\n                .filter(task => task.id !== action.taskID);\r\n            return copyState;\r\n        }\r\n        case 'ADD-TASK': {\r\n            let newTask: TaskType = {id: v1(), title: action.taskTitle, isDone: false};\r\n            return {...state, [action.todolistID]: [newTask, ...state[action.todolistID]]};\r\n\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            return  {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    isDone: action.isDone\r\n                } : t)]\r\n            };\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID].map(t => t.id === action.taskID ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)]\r\n            };\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {...state, [action.id]: []};\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n\r\n        default :\r\n            return state;\r\n    }\r\n};\r\nexport const removeTaskAC = (taskID: string, todolistID: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskID: taskID, todolistID: todolistID} as const;\r\n};\r\nexport const addTaskAC = (newTitle: string, todolistID: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', taskTitle: newTitle, todolistID} as const;\r\n};\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todolistID: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', taskID, isDone: isDone, todolistID} as const;\r\n};\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todolistID: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', taskID, title, todolistID} as const;\r\n};\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './components/todolist/Todolist';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    AddTodolistAC,\r\n    ChangeFilterAC,\r\n    ChangeTodolistTitleAC,\r\n    RemoveTodolistAC,\r\n} from './state/todolist-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/task-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\n\r\nexport type filterValuesType = 'ALL' | 'Active' | 'Completed'\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filterValuesType\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport function AppWithRedux() {\r\n    console.log('app');\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\r\n    const removeTodoList = useCallback((todolistId: string) => {\r\n        dispatch(RemoveTodolistAC(todolistId));\r\n    }, [dispatch]);\r\n    const removeTasks = useCallback((id: string, todolistId: string) => {\r\n        dispatch(removeTaskAC(id, todolistId));\r\n    }, [dispatch]);\r\n    const changeFilter = useCallback((todolistId: string, filterValue: filterValuesType) => {\r\n        dispatch(ChangeFilterAC(todolistId, filterValue));\r\n    }, [dispatch]);\r\n    const ChangeTaskStatus = useCallback((id: string, isDone: boolean, todolistId: string) => {\r\n        dispatch(changeTaskStatusAC(id, isDone, todolistId));\r\n    }, [dispatch]);\r\n    const ChangeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\r\n        dispatch(changeTaskTitleAC(id, title, todolistId));\r\n    }, [dispatch]);\r\n    const ChangeTodolistTitle = useCallback(( todoListID: string,title: string) => {\r\n        dispatch(ChangeTodolistTitleAC(todoListID,title));\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback((newTitle: string, todolistId: string) => {\r\n        dispatch(addTaskAC(newTitle, todolistId));\r\n    }, [dispatch]);\r\n    const AddTodoList = useCallback((newTitle: string) => {\r\n        const action = AddTodolistAC(newTitle);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n    let mapedTodoLists = todolists.map(tl => {\r\n            return <Grid item key={tl.id}>\r\n                <Paper\r\n                    elevation={3}\r\n                    style={{\r\n                        paddingTop: '0',\r\n                        margin: '15px',\r\n                        padding: '10px',\r\n                        boxSizing: 'border-box'\r\n                    }}>\r\n                    <Todolist\r\n                        id={tl.id}\r\n                        title={tl.title}\r\n                        tasks={tasks}\r\n                        addTask={addTask}\r\n                        removeTasks={removeTasks}\r\n                        changeFilter={changeFilter}\r\n                        ChangeStatusTask={ChangeTaskStatus}\r\n                        filter={tl.filter}\r\n                        removeTodoList={removeTodoList}\r\n                        ChangeTaskTitle={ChangeTaskTitle}\r\n                        ChangeTodolistTitle={ChangeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>;\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar style={{marginBottom: '10px'}} position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton\r\n                        aria-label={'menu'}\r\n                        color={'inherit'}\r\n                        edge={'start'}>\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant={'h6'}>\r\n                        Todolists\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container maxWidth={'lg'}>\r\n                <Grid container>\r\n                    <AddItemForm callBack={AddTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={5}>\r\n                    {mapedTodoLists}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {TodolistReducer} from './todolist-reducer';\r\nimport {tasksReducer} from './task-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: TodolistReducer,\r\n    tasks: tasksReducer\r\n});\r\n\r\n\r\nexport type AppRootStateType= ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer);\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {AppWithRedux} from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}